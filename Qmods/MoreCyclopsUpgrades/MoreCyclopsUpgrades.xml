<?xml version="1.0"?>
<doc>
    <assembly>
        <name>MoreCyclopsUpgrades</name>
    </assembly>
    <members>
        <member name="T:MoreCyclopsUpgrades.API.AmbientEnergy.AmbientEnergyCharger`1">
            <summary>
            A generic <see cref="T:MoreCyclopsUpgrades.API.Charging.CyclopsCharger"/> for upgrade modules that draw in ambient energy like the solar or thermal.
            </summary>
            <typeparam name="T">The upgrade handler that implements <see cref="T:MoreCyclopsUpgrades.API.AmbientEnergy.AmbientEnergyUpgradeHandler"/></typeparam>
            <seealso cref="T:MoreCyclopsUpgrades.API.Charging.CyclopsCharger" />
        </member>
        <member name="P:MoreCyclopsUpgrades.API.AmbientEnergy.AmbientEnergyCharger`1.PercentNotation">
            <summary>
            Gets the currently available ambient power as a string in percent notation.
            </summary>
            <value>
            The percent notation of the available ambient power.
            </value>
        </member>
        <member name="P:MoreCyclopsUpgrades.API.AmbientEnergy.AmbientEnergyCharger`1.MaximumEnergyStatus">
            <summary>
            Gets the highest possible value of available ambient energy. Used for text color calculation.
            </summary>
            <value>
            The maximum energy status.
            </value>
        </member>
        <member name="P:MoreCyclopsUpgrades.API.AmbientEnergy.AmbientEnergyCharger`1.MinimumEnergyStatus">
            <summary>
            Gets the minimum ambient energy available required before energy production can take place. Used for text color calculation.
            </summary>
            <value>
            The minimum energy status.
            </value>
        </member>
        <member name="P:MoreCyclopsUpgrades.API.AmbientEnergy.AmbientEnergyCharger`1.TotalReserveEnergy">
            <summary>
            Returns the total charge available across all batteries for this charger.
            </summary>
        </member>
        <member name="P:MoreCyclopsUpgrades.API.AmbientEnergy.AmbientEnergyCharger`1.AmbientEnergyUpgrade">
            <summary>
            Gets the ambient energy upgrade handler.
            </summary>
            <value>
            The ambient energy upgrade handler.
            </value>
        </member>
        <member name="M:MoreCyclopsUpgrades.API.AmbientEnergy.AmbientEnergyCharger`1.#ctor(TechType,TechType,SubRoot)">
            <summary>
            Initializes a new instance of the <see cref="T:MoreCyclopsUpgrades.API.AmbientEnergy.AmbientEnergyCharger`1"/> class.
            </summary>
            <param name="tier1TechType">TechType value for the tier 1 upgrade module for this charger.</param>
            <param name="tier2TechType">TechType value for the tier 2 upgrade module for this charger.</param>
            <param name="cyclops">The cyclops reference.</param>
        </member>
        <member name="M:MoreCyclopsUpgrades.API.AmbientEnergy.AmbientEnergyCharger`1.HasAmbientEnergy(System.Single@)">
            <summary>
            Determines whether there is any ambient energy available, setting the parameter by reference to the current ambient energy level.
            </summary>
            <param name="ambientEnergyStatus">The current ambient energy status.</param>
            <returns>
              <c>true</c> if there is enough ambient energy to start producing power; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:MoreCyclopsUpgrades.API.AmbientEnergy.AmbientEnergyCharger`1.GetAmbientEnergy">
            <summary>
            Gets the raw amount of ambient energy.
            </summary>
            <returns>The raw amount of ambient energy.</returns>
        </member>
        <member name="M:MoreCyclopsUpgrades.API.AmbientEnergy.AmbientEnergyCharger`1.StatusSprite">
            <summary>
            Gets the sprite to use for the power indicator. This will only be called when <see cref="P:MoreCyclopsUpgrades.API.Charging.CyclopsCharger.ShowStatusIcon" /> returns <c>true</c>.
            </summary>
            <returns>
            A new <see cref="T:Atlas.Sprite" /> to be used in the Cyclops Helm and Holographic HUDs.
            </returns>
        </member>
        <member name="M:MoreCyclopsUpgrades.API.AmbientEnergy.AmbientEnergyCharger`1.StatusText">
            <summary>
            Gets the text to use under the power indicator icon. This will only be called when <see cref="P:MoreCyclopsUpgrades.API.Charging.CyclopsCharger.ShowStatusIcon" /> returns <c>true</c>.
            </summary>
            <returns>
            A <see cref="T:System.String" />, ready to use for in-game text. Should be limited to numeric values if possible.
            </returns>
        </member>
        <member name="M:MoreCyclopsUpgrades.API.AmbientEnergy.AmbientEnergyCharger`1.StatusTextColor">
            <summary>
            Gets the color of the text used under the power indicator icon. This will only be called when <see cref="P:MoreCyclopsUpgrades.API.Charging.CyclopsCharger.ShowStatusIcon" /> returns <c>true</c>.
            </summary>
            <returns>
            A Unity <see cref="T:UnityEngine.Color" /> value for the text. When in doubt, just set this to white.
            </returns>
        </member>
        <member name="M:MoreCyclopsUpgrades.API.AmbientEnergy.AmbientEnergyCharger`1.GenerateNewEnergy(System.Single)">
            <summary>
            Produces power for the Cyclops during the RechargeCyclops update cycle.<para />
            Use this for method rechargable energy drawn from the environment is isn't limited by a material resource.<para />
            This method should return <c>0f</c> if there is no power avaiable from this charging handler.<para />
            You may limit the amount of power produced to only what the cyclops needs or you may return more.<para />
            DO NOT recharge the Cyclops PowerRelay yourself from this method!!! The MoreCyclopsUpgrades PowerManager will handle that.<para /></summary>
            <param name="requestedPower">The amount of power being requested by the cyclops; This is the current Power Deficit of the cyclops.</param>
            <returns>
            The amount of power produced by this cyclops charger.
            </returns>
        </member>
        <member name="M:MoreCyclopsUpgrades.API.AmbientEnergy.AmbientEnergyCharger`1.DrainReserveEnergy(System.Single)">
            <summary>
            Produces power for the Cyclops during the RechargeCyclops update cycle.<para />
            This method is only invoked if no chargers returned any energy from <see cref="M:MoreCyclopsUpgrades.API.AmbientEnergy.AmbientEnergyCharger`1.GenerateNewEnergy(System.Single)" />.<para />
            Use this for method energy from batteries, reactor rods, biomass, or anything that can otherwise run out.<para />
            This method should return <c>0f</c> if there is no power avaiable from this charging handler.<para />
            You may limit the amount of power produced to only what the cyclops needs or you may return more.<para />
            DO NOT recharge the Cyclops PowerRelay yourself from this method!!! The MoreCyclopsUpgrades PowerManager will handle that.<para />
            </summary>
            <param name="requestedPower">The amount of power being requested by the cyclops; This is the current Power Deficit of the cyclops.</param>
            <returns>
            The amount of power produced by this cyclops charger.
            </returns>
        </member>
        <member name="T:MoreCyclopsUpgrades.API.AmbientEnergy.AmbientEnergyIconOverlay`2">
            <summary>
            A standarized <see cref="T:MoreCyclopsUpgrades.API.PDA.IconOverlay"/> implementation for <see cref="T:MoreCyclopsUpgrades.API.AmbientEnergy.AmbientEnergyCharger`1"/>s.
            </summary>
            <typeparam name="HandlerType">The type of the andler type.</typeparam>
            <typeparam name="ChargerType">The type of the harger type.</typeparam>
            <seealso cref="T:MoreCyclopsUpgrades.API.PDA.IconOverlay" />
        </member>
        <member name="M:MoreCyclopsUpgrades.API.AmbientEnergy.AmbientEnergyIconOverlay`2.#ctor(uGUI_ItemIcon,InventoryItem)">
            <summary>
            Initializes a new instance of the <see cref="T:MoreCyclopsUpgrades.API.AmbientEnergy.AmbientEnergyIconOverlay`2"/> class.
            </summary>
            <param name="icon">The PDA icon.</param>
            <param name="upgradeModule">The upgrade module item.</param>
        </member>
        <member name="M:MoreCyclopsUpgrades.API.AmbientEnergy.AmbientEnergyIconOverlay`2.UpdateText">
            <summary>
            Update the values in <see cref="F:MoreCyclopsUpgrades.API.PDA.IconOverlay.UpperText" />, <see cref="F:MoreCyclopsUpgrades.API.PDA.IconOverlay.MiddleText" />, and <see cref="F:MoreCyclopsUpgrades.API.PDA.IconOverlay.LowerText" /> in this method.
            </summary>
        </member>
        <member name="T:MoreCyclopsUpgrades.API.AmbientEnergy.AmbientEnergyUpgradeHandler">
            <summary>
            A standardized <see cref="T:MoreCyclopsUpgrades.API.Upgrades.StackingGroupHandler"/> implementation for <see cref="T:MoreCyclopsUpgrades.API.AmbientEnergy.AmbientEnergyCharger`1"/>s.
            </summary>
            <seealso cref="T:MoreCyclopsUpgrades.API.Upgrades.StackingGroupHandler" />
        </member>
        <member name="P:MoreCyclopsUpgrades.API.AmbientEnergy.AmbientEnergyUpgradeHandler.MaxChargers">
            <summary>
            Gets the maximum number of chargers that can work together to increase the charging rate.<para/>
            Defaults to <c>6</c>.
            </summary>
            <value>
            The maximum number of same-type chargers that can provide power together.
            </value>
        </member>
        <member name="P:MoreCyclopsUpgrades.API.AmbientEnergy.AmbientEnergyUpgradeHandler.TotalBatteryCapacity">
            <summary>
            Gets the total battery capacity.
            </summary>
            <value>
            The total battery capacity.
            </value>
            <seealso cref="P:MoreCyclopsUpgrades.API.AmbientEnergy.AmbientEnergyCharger`1.TotalReserveEnergy"/>
            <seealso cref="M:MoreCyclopsUpgrades.API.AmbientEnergy.AmbientEnergyCharger`1.StatusTextColor"/>
        </member>
        <member name="P:MoreCyclopsUpgrades.API.AmbientEnergy.AmbientEnergyUpgradeHandler.TotalBatteryCharge">
            <summary>
            Gets the total battery charge.
            </summary>
            <value>
            The total battery charge.
            </value>
            <seealso cref="P:MoreCyclopsUpgrades.API.AmbientEnergy.AmbientEnergyCharger`1.TotalReserveEnergy"/>
            <seealso cref="M:MoreCyclopsUpgrades.API.AmbientEnergy.AmbientEnergyCharger`1.StatusTextColor"/>
        </member>
        <member name="P:MoreCyclopsUpgrades.API.AmbientEnergy.AmbientEnergyUpgradeHandler.ChargeMultiplier">
            <summary>
            Gets the charge multiplier. This updates depending on how many instances of this upgrade module (and at what tier) are currently installed in the Cyclops.
            </summary>
            <value>
            The charge multiplier.
            </value>
        </member>
        <member name="M:MoreCyclopsUpgrades.API.AmbientEnergy.AmbientEnergyUpgradeHandler.#ctor(TechType,TechType,System.String,SubRoot)">
            <summary>
            Initializes a new instance of the <see cref="T:MoreCyclopsUpgrades.API.AmbientEnergy.AmbientEnergyUpgradeHandler"/> class.
            </summary>
            <param name="tier1Id">The tier1 identifier.</param>
            <param name="tier2Id">The tier2 identifier.</param>
            <param name="maxedOutMsg">The maxed out MSG.</param>
            <param name="cyclops">The cyclops.</param>
        </member>
        <member name="M:MoreCyclopsUpgrades.API.AmbientEnergy.AmbientEnergyUpgradeHandler.GetBatteryPower(System.Single,System.Single)">
            <summary>
            Gets power from the reserve battery.
            </summary>
            <param name="drainingRate">The rate at which power can be pulled from the battery.</param>
            <param name="requestedPower">The amonut of requested power.</param>
            <returns></returns>
        </member>
        <member name="M:MoreCyclopsUpgrades.API.AmbientEnergy.AmbientEnergyUpgradeHandler.RechargeBatteries(System.Single)">
            <summary>
            Recharges the reserve batteries with the provided surplus power.
            </summary>
            <param name="surplusPower">The surplus power.</param>
        </member>
        <member name="T:MoreCyclopsUpgrades.API.AmbientEnergy.BatteryDetails">
            <summary>
            A simple class for <see cref="T:Equipment"/> modules that contain a <see cref="T:Battery"/> component
            </summary>
        </member>
        <member name="T:MoreCyclopsUpgrades.API.Buildables.AuxiliaryUpgradeConsole">
            <summary>
            The core functionality of an Auxiliary Upgrade Console.<para/>
            Handles basic player interaction, save data, and connecting with the Cyclops sub.
            </summary>
            <seealso cref="T:HandTarget" />
            <seealso cref="T:IHandTarget" />
            <seealso cref="T:IProtoEventListener" />
            <seealso cref="T:MoreCyclopsUpgrades.API.Buildables.ICyclopsBuildable" /> 
        </member>
        <member name="F:MoreCyclopsUpgrades.API.Buildables.AuxiliaryUpgradeConsole.TotalSlots">
            <summary>
            The total number of upgrade slots. This value is constant.
            </summary>
        </member>
        <member name="F:MoreCyclopsUpgrades.API.Buildables.AuxiliaryUpgradeConsole.SlotNames">
            <summary>
            A read-only collection of the upgrade slot names. These will be used to up upgrade slots in <see cref="P:MoreCyclopsUpgrades.API.Buildables.AuxiliaryUpgradeConsole.Modules"/>.
            </summary>
        </member>
        <member name="P:MoreCyclopsUpgrades.API.Buildables.AuxiliaryUpgradeConsole.OnHoverText">
            <summary>
            Gets the text to display when the player's cursor hovers over this upgrade console.<para/>
            By default, this will display the same text as the original AuxUpgradeConsole.
            </summary>
            <value>
            The on hover text to display.
            </value>
        </member>
        <member name="M:MoreCyclopsUpgrades.API.Buildables.AuxiliaryUpgradeConsole.OnSlotEquipped(System.String,InventoryItem)">
            <summary>
            Invoked after <see cref="M:MoreCyclopsUpgrades.API.Buildables.AuxiliaryUpgradeConsole.OnEquip(System.String,InventoryItem)"/> has finished handling the added item.
            </summary>
        </member>
        <member name="M:MoreCyclopsUpgrades.API.Buildables.AuxiliaryUpgradeConsole.OnSlotUnequipped(System.String,InventoryItem)">
            <summary>
            Invoked after <see cref="M:MoreCyclopsUpgrades.API.Buildables.AuxiliaryUpgradeConsole.OnUnequip(System.String,InventoryItem)"/> has finished handling the removed item.
            </summary>
        </member>
        <member name="F:MoreCyclopsUpgrades.API.Buildables.AuxiliaryUpgradeConsole.ModulesRoot">
            <summary>
            The root object container for the <see cref="T:Equipment"/> modules.
            </summary>
        </member>
        <member name="P:MoreCyclopsUpgrades.API.Buildables.AuxiliaryUpgradeConsole.Modules">
            <summary>
            Gets the equipment modules.
            </summary>
        </member>
        <member name="P:MoreCyclopsUpgrades.API.Buildables.AuxiliaryUpgradeConsole.IsConnectedToCyclops">
            <summary>
            Gets a value indicating whether this buildable is connected to the Cyclops.
            </summary>
            <value>
              <c>true</c> if this buildable is connected to cyclops; otherwise, <c>false</c>.
            </value>
            <see cref="T:MoreCyclopsUpgrades.API.Buildables.ICyclopsBuildable"/>
            <seealso cref="M:MoreCyclopsUpgrades.API.Buildables.BuildableManager`1.ConnectWithManager(`0)" />
        </member>
        <member name="P:MoreCyclopsUpgrades.API.Buildables.AuxiliaryUpgradeConsole.UpgradeSlots">
            <summary>
            Gets the upgrade slots for this upgrade console.
            </summary>
            <remarks>Value not initialized until after <see cref="M:MoreCyclopsUpgrades.API.Buildables.AuxiliaryUpgradeConsole.Awake"/> is run.</remarks>
        </member>
        <member name="M:MoreCyclopsUpgrades.API.Buildables.AuxiliaryUpgradeConsole.OnHandHover(GUIHand)">
            <summary>
            Called when the player hovers over the upgrade console.
            </summary>
            <param name="guiHand">The GUI hand.</param>
            <see cref="T:IHandTarget"/>
        </member>
        <member name="M:MoreCyclopsUpgrades.API.Buildables.AuxiliaryUpgradeConsole.OnHandClick(GUIHand)">
            <summary>
            Called when the player clicks the upgrade console.
            </summary>
            <param name="guiHand">The GUI hand.</param>
            <see cref="T:IHandTarget"/>
        </member>
        <member name="M:MoreCyclopsUpgrades.API.Buildables.AuxiliaryUpgradeConsole.OpenEquipmentScreen">
            <summary>
            Opens the player's PDA and displays the equipment module slots.<para/>
            Upgrade Console must be fully constructed to access the equipment slots.
            </summary>
        </member>
        <member name="M:MoreCyclopsUpgrades.API.Buildables.AuxiliaryUpgradeConsole.Awake">
            <summary>
             Unity Awake event.
            </summary>
        </member>
        <member name="M:MoreCyclopsUpgrades.API.Buildables.AuxiliaryUpgradeConsole.IProtoEventListener#OnProtoSerialize(ProtobufSerializer)">
            <summary>
            Called when the game is being saved.
            </summary>
            <param name="serializer">The serializer.</param>
            <see cref="T:IProtoEventListener"/>
        </member>
        <member name="M:MoreCyclopsUpgrades.API.Buildables.AuxiliaryUpgradeConsole.IProtoEventListener#OnProtoDeserialize(ProtobufSerializer)">
            <summary>
            Called when loading the game from a save file.
            </summary>
            <param name="serializer">The serializer.</param>
            <see cref="T:IProtoEventListener"/>
        </member>
        <member name="T:MoreCyclopsUpgrades.API.Buildables.BuildableManager`1">
            <summary>
            A generic <see cref="T:MoreCyclopsUpgrades.API.General.IAuxCyclopsManager" /> that can track buildables in the Cyclops
            </summary>
            <typeparam name="BuildableMono">The type of the uildable mono.</typeparam>
            <seealso cref="T:MoreCyclopsUpgrades.API.General.IAuxCyclopsManager" />
        </member>
        <member name="F:MoreCyclopsUpgrades.API.Buildables.BuildableManager`1.TrackedBuildables">
            <summary>
            The list of tracked buildables.
            </summary>
        </member>
        <member name="F:MoreCyclopsUpgrades.API.Buildables.BuildableManager`1.Cyclops">
            <summary>
            The cyclops <see cref="T:SubRoot"/> reference.
            </summary>
        </member>
        <member name="P:MoreCyclopsUpgrades.API.Buildables.BuildableManager`1.TrackedBuildablesCount">
            <summary>
            Gets the number of currently tracked buildables.
            </summary>
            <value>
            The tracked buildables count.
            </value>
        </member>
        <member name="M:MoreCyclopsUpgrades.API.Buildables.BuildableManager`1.#ctor(SubRoot)">
            <summary>
            Initializes a new instance of the <see cref="T:MoreCyclopsUpgrades.API.Buildables.BuildableManager`1"/> class.
            </summary>
            <param name="cyclops">The cyclops.</param>
        </member>
        <member name="M:MoreCyclopsUpgrades.API.Buildables.BuildableManager`1.Initialize(SubRoot)">
            <summary>
            Initializes the auxiliary manager with the specified cyclops.<para />
            This method is invoked only after all <see cref="T:MoreCyclopsUpgrades.API.General.IAuxCyclopsManager" /> instances have been created.<para />
            Use this if you need to run any additional code after the constructor.
            </summary>
            <param name="cyclops">The cyclops this manager will handle.</param>
            <returns>
              <c>True</c> if the initialization process succeeded; Otherwise returns <c>False</c>.
            </returns>
        </member>
        <member name="M:MoreCyclopsUpgrades.API.Buildables.BuildableManager`1.SyncBuildables">
            <summary>
            Synchronizes the buildables, executing the <see cref="M:MoreCyclopsUpgrades.API.Buildables.BuildableManager`1.ConnectWithManager(`0)"/> method on each one found.
            </summary>
        </member>
        <member name="M:MoreCyclopsUpgrades.API.Buildables.BuildableManager`1.AddBuildable(`0)">
            <summary>
            Adds the buildable to the list tracked buildables. Does not invoke <see cref="M:MoreCyclopsUpgrades.API.Buildables.BuildableManager`1.ConnectWithManager(`0)"/>.
            </summary>
            <param name="buildable">The buildable.</param>
        </member>
        <member name="M:MoreCyclopsUpgrades.API.Buildables.BuildableManager`1.RemoveBuildable(`0)">
            <summary>
            Removes the buildable from the list of tracked buildables.
            </summary>
            <param name="buildable">The buildable.</param>
        </member>
        <member name="M:MoreCyclopsUpgrades.API.Buildables.BuildableManager`1.ConnectWithManager(`0)">
            <summary>
            Connects the buildable with this manager.
            </summary>
            <param name="buildable">The buildable.</param>
        </member>
        <member name="M:MoreCyclopsUpgrades.API.Buildables.BuildableManager`1.ApplyToAll(System.Action{`0})">
            <summary>
            Applies and <see cref="T:System.Action"/> to all buildables this manager tracks.
            </summary>
            <param name="action">The action.</param>
        </member>
        <member name="M:MoreCyclopsUpgrades.API.Buildables.BuildableManager`1.FindFirst(System.Boolean,System.Predicate{`0},System.Action)">
            <summary>
            Finds the first tracked buildable that satisfies the condition and optionally performs an action on it.
            </summary>
            <param name="result">if set to <c>true</c> [result].</param>
            <param name="condition">The condition.</param>
            <param name="actionOnHit">The action on hit.</param>
            <returns></returns>
        </member>
        <member name="T:MoreCyclopsUpgrades.API.Buildables.ICyclopsBuildable">
            <summary>
            A simple interface used to provide status details to the <see cref="T:MoreCyclopsUpgrades.API.Buildables.BuildableManager`1"/>.
            </summary>
        </member>
        <member name="P:MoreCyclopsUpgrades.API.Buildables.ICyclopsBuildable.IsConnectedToCyclops">
            <summary>
            Gets a value indicating whether this buildable is connected to the Cyclops.
            </summary>
            <value>
              <c>true</c> if this buildable is connected to cyclops; otherwise, <c>false</c>.
            </value>
            <seealso cref="M:MoreCyclopsUpgrades.API.Buildables.BuildableManager`1.ConnectWithManager(`0)"/>
        </member>
        <member name="T:MoreCyclopsUpgrades.API.Buildables.IUpgradeSlots">
            <summary>
            Defines an interface for an upgrade console that can report on its upgrade slots.
            </summary>
        </member>
        <member name="P:MoreCyclopsUpgrades.API.Buildables.IUpgradeSlots.UpgradeSlots">
            <summary>
            Gets the upgrade slots for this upgrade console.
            </summary>
            <value>
            The upgrade slots.
            </value>
        </member>
        <member name="T:MoreCyclopsUpgrades.API.Buildables.UpgradeSlot">
            <summary>
            A struct for quick access to the details of an upgrade console slot.
            </summary>
        </member>
        <member name="F:MoreCyclopsUpgrades.API.Buildables.UpgradeSlot.equipment">
            <summary>
            The reference to the parent <see cref="T:Equipment"/> that houses this upgrade slot.
            </summary>
        </member>
        <member name="F:MoreCyclopsUpgrades.API.Buildables.UpgradeSlot.slotName">
            <summary>
            The upgrade slot name.
            </summary>
        </member>
        <member name="M:MoreCyclopsUpgrades.API.Buildables.UpgradeSlot.#ctor(Equipment,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:MoreCyclopsUpgrades.API.Buildables.UpgradeSlot"/> struct.
            </summary>
            <param name="parent">The parent equipment.</param>
            <param name="name">The slot name.</param>
        </member>
        <member name="M:MoreCyclopsUpgrades.API.Buildables.UpgradeSlot.GetTechTypeInSlot">
            <summary>
            Gets the TechType value in this slot.
            </summary>
            <returns>
                The <see cref="T:TechType"/> value corresponding to the item in the slot if one is present;
                Otherwise returns <see cref="F:TechType.None"/> if the slot is empty.
            </returns>
        </member>
        <member name="M:MoreCyclopsUpgrades.API.Buildables.UpgradeSlot.GetItemInSlot">
            <summary>
            Gets the inventory item in slot.
            </summary>
            <returns>
                The <see cref="T:InventoryItem"/> reference of the item in the slot if one is present;
                Otherwise returns <c>null</c>.
            </returns>
        </member>
        <member name="M:MoreCyclopsUpgrades.API.Buildables.UpgradeSlot.IsSlotEmpty">
            <summary>
            Determines whether the slot is empty.
            </summary>
            <returns>
                <c>true</c> if this slot is empty; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:MoreCyclopsUpgrades.API.Buildables.UpgradeSlot.HasItemInSlot">
            <summary>
            Determines whether there the slot has as item.
            </summary>
            <returns>
                <c>true</c> if there is an item in this slot; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:MoreCyclopsUpgrades.API.Charging.CyclopsCharger">
            <summary>
            Defines all the behaviors for a cyclops charger that handles a particular type of energy recharging.<para/>
            Recharging may be part of an update module or it might be a new buidable.<para/>
            Whatever the case, it is up to you to ensure you have all your references set and ready.<para/>
            DO NOT recharge the Cyclops PowerRelay yourself from this class!!! The MoreCyclopsUpgrades PowerManager will handle that.<para/>
            </summary>
        </member>
        <member name="F:MoreCyclopsUpgrades.API.Charging.CyclopsCharger.Cyclops">
            <summary>
            A reference to the the cyclops <see cref="T:SubRoot"/> instance.
            </summary>
        </member>
        <member name="M:MoreCyclopsUpgrades.API.Charging.CyclopsCharger.#ctor(SubRoot)">
            <summary>
            Initializes a new instance of the <see cref="T:MoreCyclopsUpgrades.API.Charging.CyclopsCharger"/> class.
            </summary>
            <param name="cyclops">The cyclops.</param>
        </member>
        <member name="P:MoreCyclopsUpgrades.API.Charging.CyclopsCharger.ShowStatusIcon">
            <summary>
            Gets a value indicating whether the charger icon allowed to be visible in the Cyclops displays.<br/>
            Depends on either <see cref="P:MoreCyclopsUpgrades.API.Charging.CyclopsCharger.ProvidingPower"/> or <see cref="P:MoreCyclopsUpgrades.API.Charging.CyclopsCharger.HasReservePower"/> returning <c>true</c>.
            </summary>
            <value>
              <c>true</c> if can be visible in the Cyclops displays; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:MoreCyclopsUpgrades.API.Charging.CyclopsCharger.ProvidingPower">
            <summary>
            Gets a value indicating whether this charger is currently providing power.
            </summary>
            <value>
              <c>true</c> if currently providing power; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:MoreCyclopsUpgrades.API.Charging.CyclopsCharger.HasReservePower">
            <summary>
            Gets a value indicating whether this charger has reserve power.
            </summary>
            <value>
              <c>true</c> if this instance has reserve power; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:MoreCyclopsUpgrades.API.Charging.CyclopsCharger.TotalReserveEnergy">
            <summary>
            If the charger has its own store of energy, return the total available reserve power.
            </summary>
            <returns>The total power the charger is capable of providing over time; Return <c>0f</c> if there are no power reserves.</returns>
        </member>
        <member name="M:MoreCyclopsUpgrades.API.Charging.CyclopsCharger.GenerateNewEnergy(System.Single)">
            <summary>
            Produces power for the Cyclops during the RechargeCyclops update cycle.<para />
            Use this for method energy drawn from the environment is isn't limited by a material resource.<para />
            This method should return <c>0f</c> if there is no power avaiable from this charging handler.<para/>
            You may limit the amount of power produced to only what the cyclops needs or you may return more.<para/>
            DO NOT recharge the Cyclops PowerRelay yourself from this method!!! The MoreCyclopsUpgrades ChargerManager will handle that.<para/>
            </summary>
            <param name="requestedPower">The amount of power being requested by the cyclops; This is the current Power Deficit of the cyclops.</param>
            <returns>The amount of power produced by this cyclops charger.</returns>
        </member>
        <member name="M:MoreCyclopsUpgrades.API.Charging.CyclopsCharger.DrainReserveEnergy(System.Single)">
            <summary>
            Produces power for the Cyclops during the RechargeCyclops update cycle.<para/>
            This method is only invoked if no chargers returned any energy from <see cref="M:MoreCyclopsUpgrades.API.Charging.CyclopsCharger.GenerateNewEnergy(System.Single)"/>.<para />
            Use this for method energy from batteries, reactor rods, biomass, or anything that can otherwise run out.<para />
            This method should return <c>0f</c> if there is no power avaiable from this charging handler.<para/>
            You may limit the amount of power produced to only what the cyclops needs or you may return more.<para/>
            DO NOT recharge the Cyclops PowerRelay yourself from this method!!! The MoreCyclopsUpgrades PowerManager will handle that.<para/>
            </summary>
            <param name="requestedPower">The amount of power being requested by the cyclops; This is the current Power Deficit of the cyclops.</param>
            <returns>The amount of power produced by this cyclops charger.</returns>
        </member>
        <member name="M:MoreCyclopsUpgrades.API.Charging.CyclopsCharger.StatusSprite">
            <summary>
            Gets the sprite to use for the power indicator. This will only be called when <see cref="P:MoreCyclopsUpgrades.API.Charging.CyclopsCharger.ShowStatusIcon"/> returns <c>true</c>.
            </summary>
            <returns>A new <see cref="T:Atlas.Sprite"/> to be used in the Cyclops Helm and Holographic HUDs.</returns>
        </member>
        <member name="M:MoreCyclopsUpgrades.API.Charging.CyclopsCharger.StatusText">
            <summary>
            Gets the text to use under the power indicator icon. This will only be called when <see cref="P:MoreCyclopsUpgrades.API.Charging.CyclopsCharger.ShowStatusIcon"/> returns <c>true</c>.
            </summary>
            <returns>A <see cref="T:System.String"/>, ready to use for in-game text. Should be limited to numeric values if possible.</returns>
        </member>
        <member name="M:MoreCyclopsUpgrades.API.Charging.CyclopsCharger.StatusTextColor">
            <summary>
            Gets the color of the text used under the power indicator icon. This will only be called when <see cref="P:MoreCyclopsUpgrades.API.Charging.CyclopsCharger.ShowStatusIcon"/> returns <c>true</c>.
            </summary>
            <returns>A Unity <see cref="T:UnityEngine.Color"/> value for the text. When in doubt, just set this to white.</returns>
        </member>
        <member name="T:MoreCyclopsUpgrades.API.Charging.ICyclopsChargerCreator">
            <summary>
            Defines an interface for a class that is capable of creating a new <see cref="T:MoreCyclopsUpgrades.API.Charging.CyclopsCharger"/> on demand.
            </summary>
        </member>
        <member name="M:MoreCyclopsUpgrades.API.Charging.ICyclopsChargerCreator.CreateCyclopsCharger(SubRoot)">
            <summary>
            Creates a new <see cref="T:MoreCyclopsUpgrades.API.Charging.CyclopsCharger"/> when the Cyclops is initialized.
            </summary>
            <param name="cyclops">The cyclops that the <see cref="T:MoreCyclopsUpgrades.API.Charging.CyclopsCharger"/> is tasked with recharging.</param>
            <returns>A new <see cref="T:MoreCyclopsUpgrades.API.Charging.CyclopsCharger"/> ready to produce power for the Cyclops.</returns>
        </member>
        <member name="T:MoreCyclopsUpgrades.API.Charging.CreateCyclopsCharger">
            <summary>
            Defines a method that creates a new <see cref="T:MoreCyclopsUpgrades.API.Charging.CyclopsCharger"/> when needed.<para/>
            DO NOT recharge the Cyclops PowerRelay yourself from the instantiated <see cref="T:MoreCyclopsUpgrades.API.Charging.CyclopsCharger"/>!!! MoreCyclopsUpgrades will handle that.<para/>
            </summary>
            <param name="cyclops">The cyclops that the <see cref="T:MoreCyclopsUpgrades.API.Charging.CyclopsCharger"/> is tasked with recharging.</param>
            <returns>A new <see cref="T:MoreCyclopsUpgrades.API.Charging.CyclopsCharger"/> ready to produce power for the Cyclops.</returns>
        </member>
        <member name="T:MoreCyclopsUpgrades.API.IMCUCrossMod">
            <summary>
            Defines a set of utility APIs used for better cross-mod compatibility. 
            </summary>
        </member>
        <member name="P:MoreCyclopsUpgrades.API.IMCUCrossMod.StepsToCyclopsModulesTabInCyclopsFabricator">
            <summary>
            Gets the steps to "CyclopsModules" crafting tab in the Cyclops Fabricator.<para/>
            This would be necessary for best cross-compatibility with the [VehicleUpgradesInCyclops] mod.<para/>
            Will return null if this mod isn't present, under the assumption that this mod isn't present and it is otherwise find to add crafting nodes to the Cyclops Fabricator root.
            </summary>
            <value>
            The steps to the Cyclops Fabricator's "CyclopsModules" crafting tab if it exists.
            </value>
        </member>
        <member name="M:MoreCyclopsUpgrades.API.IMCUCrossMod.GetPowerRatingManager(SubRoot)">
            <summary>
            Gets the <see cref="T:MoreCyclopsUpgrades.API.General.IPowerRatingManager"/> manging the specified Cyclops sub;
            </summary>
            <param name="cyclops"></param>
            <returns></returns>
        </member>
        <member name="M:MoreCyclopsUpgrades.API.IMCUCrossMod.ApplyPowerRatingModifier(SubRoot,TechType,System.Single)">
            <summary>
            Applies the power rating modifier to the specified Cyclops.
            </summary>
            <param name="cyclops">The Cyclops sub to apply the modifier to.</param>
            <param name="techType">The source of the power rating modifier. Not allowed to be <see cref="F:TechType.None"/>.</param>
            <param name="modifier">
            The modifier. Must be a positive value.<para/>
            Values less than <c>1f</c> reduce engine efficienty rating.<para/>
            Values greater than <c>1f</c> improve engine efficienty rating.
            </param>
        </member>
        <member name="M:MoreCyclopsUpgrades.API.IMCUCrossMod.HasUpgradeInstalled(SubRoot,TechType)">
            <summary>
            Checks whether the Cyclops has the specified upgrade module installed anywhere across all upgrade consoles.
            </summary>
            <param name="cyclops">The cyclops to search.</param>
            <param name="techType">The upgrade module's techtype ID.</param>
            <returns>
              <c>true</c> if the upgrade is found installed on the Cyclops; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:MoreCyclopsUpgrades.API.IMCUCrossMod.GetUpgradeCount(SubRoot,TechType)">
            <summary>
            Gets the total number of the specified upgrade module currently installed in the Cyclops.
            </summary>
            <param name="cyclops">The cyclops to search.</param>
            <param name="techType">The upgrade module's techtype ID.</param>
            <returns>The number of upgrade modules of this techtype ID currently in the Cyclops.</returns>
        </member>
        <member name="M:MoreCyclopsUpgrades.API.IMCUCrossMod.GetAllUpgradeSlots(SubRoot)">
            <summary>
            Gets an enumeration of all <see cref="T:MoreCyclopsUpgrades.API.Buildables.UpgradeSlot"/>s in this Cyclops across all upgrade consoles.
            </summary>
            <param name="cyclops">The cyclops to search.</param>
            <returns>An iterator of <see cref="T:System.Collections.Generic.IEnumerable`1"/> the covers all upgrade slots in the Cyclops.</returns>
        </member>
        <member name="M:MoreCyclopsUpgrades.API.IMCUCrossMod.GetAllUpgradeHandlers(SubRoot)">
            <summary>
            Returns a collection of all upgrade handlers for the Cyclops sub.
            </summary>
            <param name="cyclops">The cyclops sub being accessed.</param>
            <returns>A read-only collection of all upgrade handlers managing this sub.</returns>
        </member>
        <member name="T:MoreCyclopsUpgrades.API.IMCULogger">
            <summary>
            Defines a set of logging APIs that other mods can use.<para/>
            Debug level logs will only be printed of MCU's debug logging is enabled.
            </summary>
        </member>
        <member name="P:MoreCyclopsUpgrades.API.IMCULogger.DebugLogsEnabled">
            <summary>
            Gets a value indicating whether calls into <see cref="M:MoreCyclopsUpgrades.API.IMCULogger.Debug(System.String,System.Boolean)"/> are handled or ignored.
            </summary>
            <value>
              <c>true</c> if debug level logs enabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:MoreCyclopsUpgrades.API.IMCULogger.Info(System.String,System.Boolean)">
            <summary>
            Writes an INFO level log to the log file. Can be optionally printed to screen.
            </summary>
            <param name="logmessage">The log message to write.</param>
            <param name="showOnScreen">if set to <c>true</c> the log message will show on screen.</param>
        </member>
        <member name="M:MoreCyclopsUpgrades.API.IMCULogger.Warning(System.String,System.Boolean)">
            <summary>
            Writes a WARN level log to the log file. Can be optionally printed to screen.
            </summary>
            <param name="logmessage">The log message to write.</param>
            <param name="showOnScreen">if set to <c>true</c> the log message will show on screen.</param>
        </member>
        <member name="M:MoreCyclopsUpgrades.API.IMCULogger.Error(System.String,System.Boolean)">
            <summary>
            Writes an ERROR level log to the log file. Can be optionally printed to screen.
            </summary>
            <param name="logmessage">The log message to write.</param>
            <param name="showOnScreen">if set to <c>true</c> the log message will show on screen.</param>
        </member>
        <member name="M:MoreCyclopsUpgrades.API.IMCULogger.Error(System.Exception,System.String)">
            <summary>
            Writes <see cref="T:System.Exception" /> to an ERROR level log to file.
            </summary>
            <param name="ex">The exception to log.</param>
            <param name="logmessage">The optional additional message.</param>
        </member>
        <member name="M:MoreCyclopsUpgrades.API.IMCULogger.Debug(System.String,System.Boolean)">
            <summary>
            Writes an DEBUG level log to the log file if <see cref="P:MoreCyclopsUpgrades.API.IMCULogger.DebugLogsEnabled"/> is enabled. Can be optionally printed to screen.<para/>
            No action taken when <see cref="P:MoreCyclopsUpgrades.API.IMCULogger.DebugLogsEnabled"/> is set to <c>false</c>;
            </summary>
            <param name="logmessage">The log message to write.</param>
            <param name="showOnScreen">if set to <c>true</c> the log message will show on screen.</param>
        </member>
        <member name="T:MoreCyclopsUpgrades.API.IMCURegistration">
            <summary>
            Defines a set of patch-time APIs to be used to register your own class factories that will integrate into MoreCyclopsUpgrades.
            </summary>
        </member>
        <member name="M:MoreCyclopsUpgrades.API.IMCURegistration.AuxCyclopsManager``1(MoreCyclopsUpgrades.API.General.CreateAuxCyclopsManager)">
            <summary>
            Registers a <see cref="T:MoreCyclopsUpgrades.API.General.CreateAuxCyclopsManager" /> method that creates returns a new <see cref="T:MoreCyclopsUpgrades.API.General.IAuxCyclopsManager" /> on demand.<para />
            This method will be invoked only once for each Cyclops sub in the game world.<para />
            Use this when you simply need to have a class that is attaches one instance per Cyclops.
            </summary>
            <typeparam name="T">Your class that implements <see cref="T:MoreCyclopsUpgrades.API.General.IAuxCyclopsManager" />.</typeparam>
            <param name="createEvent">The create event.</param>
        </member>
        <member name="M:MoreCyclopsUpgrades.API.IMCURegistration.AuxCyclopsManager``1(MoreCyclopsUpgrades.API.General.IAuxCyclopsManagerCreator)">
            <summary>
            Registers a <see cref="T:MoreCyclopsUpgrades.API.General.IAuxCyclopsManagerCreator" /> class that can create a new <see cref="T:MoreCyclopsUpgrades.API.General.IAuxCyclopsManager" /> on demand.<para />
            This method will be invoked only once for each Cyclops sub in the game world.<para />
            Use this when you simply need to have a class that attaches one instance per Cyclops.
            </summary>
            <typeparam name="T">Your class that implements <see cref="T:MoreCyclopsUpgrades.API.General.IAuxCyclopsManager" />.</typeparam>
            <param name="managerCreator">The manager creator class instance.</param>
        </member>
        <member name="M:MoreCyclopsUpgrades.API.IMCURegistration.CyclopsCharger``1(MoreCyclopsUpgrades.API.Charging.CreateCyclopsCharger)">
            <summary>
            Registers a <see cref="T:MoreCyclopsUpgrades.API.Charging.CreateCyclopsCharger" /> method that creates a new <see cref="T:MoreCyclopsUpgrades.API.Charging.CyclopsCharger" /> on demand.<para />
            This method will be invoked only once for each Cyclops sub in the game world.<para />
            Use this for rechargable batteries and energy drawn from the environment.
            </summary>
            <typeparam name="T">Your class that implements <see cref="T:MoreCyclopsUpgrades.API.Charging.CyclopsCharger" />.</typeparam>
            <param name="createEvent">A method that takes no parameters a returns a new instance of an <see cref="T:MoreCyclopsUpgrades.API.Charging.CreateCyclopsCharger" />.</param>
        </member>
        <member name="M:MoreCyclopsUpgrades.API.IMCURegistration.CyclopsCharger``1(MoreCyclopsUpgrades.API.Charging.ICyclopsChargerCreator)">
            <summary>
            Registers a <see cref="T:MoreCyclopsUpgrades.API.Charging.ICyclopsChargerCreator" /> class that can create a new <see cref="T:MoreCyclopsUpgrades.API.Charging.CyclopsCharger" /> on demand.<para />
            This method will be invoked only once for each Cyclops sub in the game world.<para />
            Use this for rechargable batteries and energy drawn from the environment.
            </summary>
            <typeparam name="T">Your class that implements <see cref="T:MoreCyclopsUpgrades.API.Charging.CyclopsCharger" />.</typeparam>
            <param name="chargerCreator">A class that implements the <see cref="M:MoreCyclopsUpgrades.API.Charging.ICyclopsChargerCreator.CreateCyclopsCharger(SubRoot)" /> method.</param>
        </member>
        <member name="M:MoreCyclopsUpgrades.API.IMCURegistration.CyclopsUpgradeHandler(MoreCyclopsUpgrades.API.Upgrades.CreateUpgradeHandler)">
            <summary>
            Registers a <see cref="T:MoreCyclopsUpgrades.API.Upgrades.CreateUpgradeHandler"/> method that creates a new <see cref="T:MoreCyclopsUpgrades.API.Upgrades.UpgradeHandler"/> on demand.<para/>
            This method will be invoked only once for each Cyclops sub in the game world.
            </summary>
            <param name="createEvent">A method that takes no parameters a returns a new instance of an <see cref="T:MoreCyclopsUpgrades.API.Upgrades.UpgradeHandler"/>.</param>
        </member>
        <member name="M:MoreCyclopsUpgrades.API.IMCURegistration.CyclopsUpgradeHandler(MoreCyclopsUpgrades.API.Upgrades.IUpgradeHandlerCreator)">
            <summary>
            Registers a <see cref="T:MoreCyclopsUpgrades.API.Upgrades.CreateUpgradeHandler"/> class can create a new <see cref="T:MoreCyclopsUpgrades.API.Upgrades.UpgradeHandler"/> on demand.<para/>
            This method will be invoked only once for each Cyclops sub in the game world.
            </summary>
            <param name="handlerCreator">A class that implements this <see cref="M:MoreCyclopsUpgrades.API.Upgrades.IUpgradeHandlerCreator.CreateUpgradeHandler(SubRoot)"/> method.</param>
        </member>
        <member name="M:MoreCyclopsUpgrades.API.IMCURegistration.PdaIconOverlay(TechType,MoreCyclopsUpgrades.API.PDA.IIconOverlayCreator)">
            <summary>
            Registers a <see cref="T:MoreCyclopsUpgrades.API.PDA.IIconOverlayCreator" /> class that can create a new <see cref="T:MoreCyclopsUpgrades.API.PDA.IconOverlay" /> on demand.<para />
            This method will be invoked every time the PDA screen opens up on a Cyclops Upgrade Console that contains a module of the specified <see cref="T:TechType"/>.
            </summary>
            <param name="techType">The upgrade module's techtype.</param>
            <param name="overlayCreator">A class that implements a method the <see cref="M:MoreCyclopsUpgrades.API.PDA.IIconOverlayCreator.CreateIconOverlay(uGUI_ItemIcon,InventoryItem)"/> method.</param>
        </member>
        <member name="M:MoreCyclopsUpgrades.API.IMCURegistration.PdaIconOverlay(TechType,MoreCyclopsUpgrades.API.PDA.CreateIconOverlay)">
            <summary>
            Registers a <see cref="T:MoreCyclopsUpgrades.API.PDA.CreateIconOverlay" /> method that creates a new <see cref="T:MoreCyclopsUpgrades.API.PDA.IconOverlay" /> on demand.<para />
            This method will be invoked every time the PDA screen opens up on a Cyclops Upgrade Console that contains a module of the specified <see cref="T:TechType"/>.
            </summary>
            <param name="techType">The upgrade module's techtype.</param>
            <param name="createEvent">A method that takes in a <see cref="T:uGUI_ItemIcon"/> and <see cref="T:InventoryItem"/> and returns a new <see cref="T:MoreCyclopsUpgrades.API.PDA.IconOverlay"/>.</param>
        </member>
        <member name="T:MoreCyclopsUpgrades.API.IMCUSearch">
            <summary>
            Defines a set of game-time APIs to search for the various instances created by the creator methods and classes registered on <see cref="T:MoreCyclopsUpgrades.API.IMCURegistration"/>.
            </summary>
        </member>
        <member name="M:MoreCyclopsUpgrades.API.IMCUSearch.AuxCyclopsManager``1(SubRoot)">
            <summary>
            Gets the typed <see cref="T:MoreCyclopsUpgrades.API.General.IAuxCyclopsManager"/> for the specified Cyclops sub.
            </summary>
            <typeparam name="T">The class you created that implements <see cref="T:MoreCyclopsUpgrades.API.General.IAuxCyclopsManager"/>.</typeparam>
            <param name="cyclops">The cyclops to search in.</param>
            <returns>A type casted <see cref="T:MoreCyclopsUpgrades.API.General.IAuxCyclopsManager"/> if found; Otherwise returns null if not found.</returns>
            <seealso cref="T:MoreCyclopsUpgrades.API.General.CreateAuxCyclopsManager"/>
        </member>
        <member name="M:MoreCyclopsUpgrades.API.IMCUSearch.AllAuxCyclopsManagers``1">
            <summary>
            Gets all typed <see cref="T:MoreCyclopsUpgrades.API.General.IAuxCyclopsManager"/>s across all Cyclops subs.
            </summary>
            <typeparam name="T">The class you created that implements <see cref="T:MoreCyclopsUpgrades.API.General.IAuxCyclopsManager"/>.</typeparam>
            <returns>A type casted enumeration of all <see cref="T:MoreCyclopsUpgrades.API.General.IAuxCyclopsManager"/>s found across all Cyclops subs, identified by name.</returns>
        </member>
        <member name="M:MoreCyclopsUpgrades.API.IMCUSearch.CyclopsCharger``1(SubRoot)">
            <summary>
            Gets the typed <see cref="M:MoreCyclopsUpgrades.API.IMCUSearch.CyclopsCharger``1(SubRoot)"/> at the specified Cyclops sub.<para/>
            Use this if you need to obtain a reference to your <seealso cref="M:MoreCyclopsUpgrades.API.IMCUSearch.CyclopsCharger``1(SubRoot)"/> for something else in your mod.
            </summary>
            <typeparam name="T">The class created by the <seealso cref="T:MoreCyclopsUpgrades.API.Charging.CreateCyclopsCharger"/> you passed into <seealso cref="M:MoreCyclopsUpgrades.API.IMCURegistration.CyclopsCharger``1(MoreCyclopsUpgrades.API.Charging.CreateCyclopsCharger)"/>.</typeparam>
            <param name="cyclops">The cyclops to search in.</param>
            <returns>A type casted <see cref="M:MoreCyclopsUpgrades.API.IMCUSearch.CyclopsCharger``1(SubRoot)"/> if found; Otherwise returns null.</returns>
        </member>
        <member name="M:MoreCyclopsUpgrades.API.IMCUSearch.CyclopsUpgradeHandler(SubRoot,TechType)">
            <summary>
            Gets the upgrade handler at the specified Cyclops sub for the specified upgrade module <see cref="T:TechType"/>.<para/>
            Use this if you need to obtain a reference to your <seealso cref="T:MoreCyclopsUpgrades.API.Upgrades.UpgradeHandler"/> for something else in your mod.
            </summary>        
            <param name="cyclops">The cyclops to search in.</param>
            <param name="upgradeId">The upgrade module techtype ID.</param>
            <returns>An <see cref="T:MoreCyclopsUpgrades.API.Upgrades.UpgradeHandler"/> if found by techtype; Otherwise returns null.</returns>
        </member>
        <member name="M:MoreCyclopsUpgrades.API.IMCUSearch.CyclopsUpgradeHandler``1(SubRoot,TechType)">
            <summary>
            Gets the upgrade handler at the specified Cyclops sub for the specified upgrade module <see cref="T:TechType"/>.<para/>
            Use this if you need to obtain a reference to your <seealso cref="T:MoreCyclopsUpgrades.API.Upgrades.UpgradeHandler"/> for something else in your mod.
            </summary>
            <typeparam name="T">The class created by the <seealso cref="T:MoreCyclopsUpgrades.API.Upgrades.CreateUpgradeHandler"/> you passed into <seealso cref="M:MoreCyclopsUpgrades.API.IMCURegistration.CyclopsUpgradeHandler(MoreCyclopsUpgrades.API.Upgrades.CreateUpgradeHandler)"/>.</typeparam>
            <param name="cyclops">The cyclops to search in.</param>
            <param name="upgradeId">The upgrade module techtype ID.</param>
            <returns>A type casted <see cref="T:MoreCyclopsUpgrades.API.Upgrades.UpgradeHandler"/> if found by techtype; Otherwise returns null.</returns>
        </member>
        <member name="M:MoreCyclopsUpgrades.API.IMCUSearch.CyclopsGroupUpgradeHandler``1(SubRoot,TechType,TechType[])">
            <summary>
            Gets the upgrade handler at the specified Cyclops sub for the specified upgrade module <see cref="T:TechType" />.<para />
            Use this if you need to obtain a reference to your <seealso cref="T:MoreCyclopsUpgrades.API.Upgrades.StackingGroupHandler" /> or <seealso cref="T:MoreCyclopsUpgrades.API.Upgrades.TieredGroupHandler`1" /> for something else in your mod.
            </summary>
            <typeparam name="T">The class created by the <seealso cref="T:MoreCyclopsUpgrades.API.Upgrades.CreateUpgradeHandler" /> you passed into <seealso cref="M:MoreCyclopsUpgrades.API.IMCURegistration.CyclopsUpgradeHandler(MoreCyclopsUpgrades.API.Upgrades.CreateUpgradeHandler)" />.</typeparam>
            <param name="cyclops">The cyclops to search in.</param>
            <param name="upgradeId">The upgrade module techtype ID.</param>
            <param name="additionalIds">Additional techtype IDs for a more precise search.</param>
            <returns>
            A type casted <see cref="T:MoreCyclopsUpgrades.API.Upgrades.UpgradeHandler" /> if found by techtype; Otherwise returns null.
            </returns>
        </member>
        <member name="T:MoreCyclopsUpgrades.API.IMCUUpgradeCollection">
            <summary>
            A read-only dictionary collection of Cyclops <see cref="T:MoreCyclopsUpgrades.API.Upgrades.UpgradeHandler"/>s.
            </summary>
        </member>
        <member name="P:MoreCyclopsUpgrades.API.IMCUUpgradeCollection.Count">
            <summary>
            Get the total count of entries in this collection.
            </summary>
        </member>
        <member name="M:MoreCyclopsUpgrades.API.IMCUUpgradeCollection.ContainsKey(TechType)">
            <summary>
            Gets a value indicating if 
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:MoreCyclopsUpgrades.API.IMCUUpgradeCollection.ContainsValue(MoreCyclopsUpgrades.API.Upgrades.UpgradeHandler)">
            <summary>
            Checks if a specifics upgrade handler exists in the collection.
            </summary>
            <param name="value">The upgrade handler being searched for.</param>
            <returns><c>True</c> if t he UpgradeHandler is part of the collection; Otherwise <c>false</c>.</returns>
        </member>
        <member name="P:MoreCyclopsUpgrades.API.IMCUUpgradeCollection.Item(TechType)">
            <summary>
            Returns the <see cref="T:MoreCyclopsUpgrades.API.Upgrades.UpgradeHandler"/> for the specified upgrade module corresponding to the provided <see cref="T:TechType"/>.
            </summary>
            <param name="key">The TechType of the upgrade module.</param>
            <returns>The <see cref="T:MoreCyclopsUpgrades.API.Upgrades.UpgradeHandler"/> managing the upgrade module.</returns>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException"/>
        </member>
        <member name="M:MoreCyclopsUpgrades.API.IMCUUpgradeCollection.TryGetValue(TechType,MoreCyclopsUpgrades.API.Upgrades.UpgradeHandler@)">
            <summary>
            Performs a safe lookup of the <see cref="T:MoreCyclopsUpgrades.API.Upgrades.UpgradeHandler"/> that corresponds with the provided <see cref="T:TechType"/>.
            </summary>
            <param name="key">The TechType of the upgrade module.</param>
            <param name="value">The upgrade handler that manages this upgrade.</param>
            <returns><c>True</c> if the upgrade module is in the collection; Otherwise <c>false</c>.</returns>
        </member>
        <member name="T:MoreCyclopsUpgrades.API.PDA.IconOverlay">
            <summary>
            The base class that is used to provide simple text overlays on top of Cyclops Upgrade Console Equipment icons when viewed in the PDA.
            </summary>
        </member>
        <member name="F:MoreCyclopsUpgrades.API.PDA.IconOverlay.UpperText">
            <summary>
            The text element anchored to <see cref="F:UnityEngine.TextAnchor.UpperCenter"/>.
            </summary>
        </member>
        <member name="F:MoreCyclopsUpgrades.API.PDA.IconOverlay.MiddleText">
            <summary>
            The text element anchored to <see cref="F:UnityEngine.TextAnchor.MiddleCenter"/>.
            </summary>
        </member>
        <member name="F:MoreCyclopsUpgrades.API.PDA.IconOverlay.LowerText">
            <summary>
            The text element anchored to <see cref="F:UnityEngine.TextAnchor.LowerCenter"/>.
            </summary>
        </member>
        <member name="F:MoreCyclopsUpgrades.API.PDA.IconOverlay.Icon">
            <summary>
            The actual UI gameobject that acts as the root to all these new UI elements.
            </summary>
        </member>
        <member name="F:MoreCyclopsUpgrades.API.PDA.IconOverlay.TechType">
            <summary>
            The upgrade module's tech type.
            </summary>
        </member>
        <member name="F:MoreCyclopsUpgrades.API.PDA.IconOverlay.Item">
            <summary>
            The upgrade module item itself.
            </summary>
        </member>
        <member name="F:MoreCyclopsUpgrades.API.PDA.IconOverlay.Cyclops">
            <summary>
            The cyclops sub where this is happening.
            </summary>
        </member>
        <member name="M:MoreCyclopsUpgrades.API.PDA.IconOverlay.#ctor(uGUI_ItemIcon,InventoryItem)">
            <summary>
            Initializes a new instance of the <see cref="T:MoreCyclopsUpgrades.API.PDA.IconOverlay"/> class.
            </summary>
            <param name="icon">The PDA icon.</param>
            <param name="upgradeModule">The upgrade module item.</param>
        </member>
        <member name="M:MoreCyclopsUpgrades.API.PDA.IconOverlay.UpdateText">
            <summary>
            Update the values in <see cref="F:MoreCyclopsUpgrades.API.PDA.IconOverlay.UpperText"/>, <see cref="F:MoreCyclopsUpgrades.API.PDA.IconOverlay.MiddleText"/>, and <see cref="F:MoreCyclopsUpgrades.API.PDA.IconOverlay.LowerText"/> in this method.
            </summary>
        </member>
        <member name="T:MoreCyclopsUpgrades.API.PDA.IIconOverlayText">
            <summary>
            A class that exposes additional <see cref="T:UnityEngine.UI.Text"/> elements that MoreCyclopsUpgrades will overlay on top of an equipment icon in the PDA screen.
            </summary>
        </member>
        <member name="P:MoreCyclopsUpgrades.API.PDA.IIconOverlayText.Font">
            <summary>
            Gets or sets the font used for this <see cref="T:UnityEngine.UI.Text"/> element.<para/>
            Defaults to Arial.
            </summary>
            <value>
            The font.
            </value>
        </member>
        <member name="P:MoreCyclopsUpgrades.API.PDA.IIconOverlayText.FontSize">
            <summary>
            Gets or sets the size of the text font used for this <see cref="T:UnityEngine.UI.Text"/> element.<para/>
            Defaults to 18.
            </summary>
            <value>
            The size of the text font.
            </value>
        </member>
        <member name="P:MoreCyclopsUpgrades.API.PDA.IIconOverlayText.FontStyle">
            <summary>
            Gets or sets the font style used for this <see cref="T:UnityEngine.UI.Text"/> element.<para/>
            Defaults to <see cref="F:UnityEngine.FontStyle.Normal"/>.
            </summary>
            <value>
            The font style.
            </value>
        </member>
        <member name="P:MoreCyclopsUpgrades.API.PDA.IIconOverlayText.TextColor">
            <summary>
            Gets or sets the color of the text used for this <see cref="T:UnityEngine.UI.Text"/> element.<para/>
            Defaults to <see cref="P:UnityEngine.Color.white"/>.
            </summary>
            <value>
            The color of the text.
            </value>
        </member>
        <member name="P:MoreCyclopsUpgrades.API.PDA.IIconOverlayText.TextOutline">
            <summary>
            Gets or sets the text outline used for this <see cref="T:UnityEngine.UI.Text"/> element.<para/>
            Defaults to <see cref="P:UnityEngine.Color.black"/>.
            </summary>
            <value>
            The text outline.
            </value>
        </member>
        <member name="P:MoreCyclopsUpgrades.API.PDA.IIconOverlayText.TextString">
            <summary>
            Gets or sets the text string used for this <see cref="T:UnityEngine.UI.Text"/> element.
            </summary>
            <value>
            The text string.
            </value>
        </member>
        <member name="T:MoreCyclopsUpgrades.API.PDA.IIconOverlayCreator">
            <summary>
            Defines an interface for a class that can create a new <see cref="T:MoreCyclopsUpgrades.API.PDA.IconOverlay"/> when needed.
            </summary>
        </member>
        <member name="M:MoreCyclopsUpgrades.API.PDA.IIconOverlayCreator.CreateIconOverlay(uGUI_ItemIcon,InventoryItem)">
            <summary>
            Creates a new child of <see cref="T:MoreCyclopsUpgrades.API.PDA.IconOverlay" /> when the Cyclops is initialized.
            </summary>
            <param name="icon">The uGUI icon where all new elements are anchored to.</param>
            <param name="upgradeModule">The reference to the upgrade module gameobject.</param>
            <returns>
            A newly instantiated class that inherits from <see cref="T:MoreCyclopsUpgrades.API.PDA.IconOverlay" />.
            </returns>
        </member>
        <member name="T:MoreCyclopsUpgrades.API.PDA.CreateIconOverlay">
            <summary>
            Defines a method that creates a new <see cref="T:MoreCyclopsUpgrades.API.PDA.IconOverlay" /> when needed.
            </summary>
            <param name="icon">The uGUI icon where all new elements are anchored to.</param>
            <param name="upgradeModule">The reference to the upgrade module gameobject.</param>
            <returns>
            A newly instantiated class that inherits from <see cref="T:MoreCyclopsUpgrades.API.PDA.IconOverlay" />.
            </returns>
        </member>
        <member name="T:MoreCyclopsUpgrades.API.General.IPowerRatingManager">
            <summary>
            Defines a class that can handle modifiers for the Cyclops Power Rating across multiple multipliers.
            </summary>
        </member>
        <member name="M:MoreCyclopsUpgrades.API.General.IPowerRatingManager.ApplyPowerRatingModifier(TechType,System.Single)">
            <summary>
            Applies the power rating modifier to the Cyclops this <see cref="T:MoreCyclopsUpgrades.API.General.IPowerRatingManager"/> is managing.
            </summary>
            <param name="techType">The source of the power rating modifier. Not allowed to be <see cref="F:TechType.None"/>.</param>
            <param name="modifier">
            The modifier. Must be a positive value.<para/>
            Values less than <c>1f</c> reduce engine efficienty rating.<para/>
            Values greater than <c>1f</c> improve engine efficienty rating.
            </param>
        </member>
        <member name="T:MoreCyclopsUpgrades.API.General.IAuxCyclopsManagerCreator">
            <summary>
            Defines an interface for a class capable of creating a new <see cref="T:MoreCyclopsUpgrades.API.General.IAuxCyclopsManager"/> on demand.
            </summary>
        </member>
        <member name="M:MoreCyclopsUpgrades.API.General.IAuxCyclopsManagerCreator.CreateAuxCyclopsManager(SubRoot)">
            <summary>
            Creates a new <see cref="T:MoreCyclopsUpgrades.API.General.IAuxCyclopsManager" /> instance when a new Cyclops sub is initialized.
            </summary>
            <param name="cyclops">The cyclops that the <see cref="T:MoreCyclopsUpgrades.API.General.IAuxCyclopsManager" /> is tasked with keeping track of.</param>
            <returns>A newly created <see cref="T:MoreCyclopsUpgrades.API.General.IAuxCyclopsManager"/> ready to be initialized by <seealso cref="M:MoreCyclopsUpgrades.API.General.IAuxCyclopsManager.Initialize(SubRoot)"/>.</returns>
        </member>
        <member name="T:MoreCyclopsUpgrades.API.General.CreateAuxCyclopsManager">
            <summary>
            Defines a method that creates a new <see cref="T:MoreCyclopsUpgrades.API.General.IAuxCyclopsManager" /> instance whenever a new Cyclops sub is spawned.
            </summary>
            <param name="cyclops">The cyclops that the <see cref="T:MoreCyclopsUpgrades.API.General.IAuxCyclopsManager" /> is tasked with keeping track of.</param>
            <returns>A newly created <see cref="T:MoreCyclopsUpgrades.API.General.IAuxCyclopsManager"/> ready to be initialized by <seealso cref="M:MoreCyclopsUpgrades.API.General.IAuxCyclopsManager.Initialize(SubRoot)"/>.</returns>
        </member>
        <member name="T:MoreCyclopsUpgrades.API.General.IAuxCyclopsManager">
            <summary>
            Defines the interface needed by MoreCyclopsUpgrades to hook your own managers into the extisting Cyclops Manager system.
            </summary>
        </member>
        <member name="M:MoreCyclopsUpgrades.API.General.IAuxCyclopsManager.Initialize(SubRoot)">
            <summary>
            Initializes the auxiliary manager with the specified cyclops.<para/>
            This method is invoked only after all <see cref="T:MoreCyclopsUpgrades.API.General.IAuxCyclopsManager"/> instances have been created.<para/>
            Use this if you need to run any additional code after the constructor.
            </summary>
            <param name="cyclops">The cyclops this manager will handle.</param>
            <returns><c>True</c> if the initialization process succeeded; Otherwise returns <c>False</c>.</returns>
        </member>
        <member name="T:MoreCyclopsUpgrades.API.Upgrades.IGroupHandler">
            <summary>
            Defines a common interface for upgade handler classes that manage multiple different upgrades as once.<para/>
            You will see this on <see cref="T:MoreCyclopsUpgrades.API.Upgrades.StackingGroupHandler"/> and <see cref="T:MoreCyclopsUpgrades.API.Upgrades.TieredGroupHandler`1"/>.
            </summary>
        </member>
        <member name="P:MoreCyclopsUpgrades.API.Upgrades.IGroupHandler.ManagedTiers">
            <summary>
            Gets a readonly list of the <see cref="T:TechType"/>s managed by this group handler.
            </summary>
            <value>
            The upgrade tiers managed by this group handler.
            </value>
        </member>
        <member name="M:MoreCyclopsUpgrades.API.Upgrades.IGroupHandler.IsManaging(TechType)">
            <summary>
            Determines whether the specified tech type is managed by this group handler.
            </summary>
            <param name="techType">The TechTech to check.</param>
            <returns>
              <c>true</c> if this group handler manages the specified TechTech; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:MoreCyclopsUpgrades.API.Upgrades.IGroupedUpgradeHandler">
            <summary>
            Defines an interface for an upgrade handler that is part of a grouped collection.<para/>
            You will see this on <see cref="T:MoreCyclopsUpgrades.API.Upgrades.TieredUpgradeHandler`1"/> and <see cref="T:MoreCyclopsUpgrades.API.Upgrades.StackingUpgradeHandler"/>.
            </summary>
        </member>
        <member name="P:MoreCyclopsUpgrades.API.Upgrades.IGroupedUpgradeHandler.GroupHandler">
            <summary>
            The parent <see cref="T:MoreCyclopsUpgrades.API.Upgrades.UpgradeHandler"/> of this tier.
            </summary>
        </member>
        <member name="T:MoreCyclopsUpgrades.API.Upgrades.StackingGroupHandler">
            <summary>
            Represents the complete collection of <see cref="T:MoreCyclopsUpgrades.API.Upgrades.StackingUpgradeHandler"/> instances.<para/>
            The events for this collection will be invoked only as needed.
            </summary>
            <seealso cref="T:MoreCyclopsUpgrades.API.Upgrades.UpgradeHandler" />
        </member>
        <member name="P:MoreCyclopsUpgrades.API.Upgrades.StackingGroupHandler.ManagedTiers">
            <summary>
            Gets a readonly list of the <see cref="T:TechType"/>s managed by this group handler.
            </summary>
            <value>
            The upgrade tiers managed by this group handler.
            </value>
        </member>
        <member name="M:MoreCyclopsUpgrades.API.Upgrades.StackingGroupHandler.IsManaging(TechType)">
            <summary>
            Determines whether the specified tech type is managed by this group handler.
            </summary>
            <param name="techType">The TechTech to check.</param>
            <returns>
              <c>true</c> if this group handler manages the specified TechTech; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:MoreCyclopsUpgrades.API.Upgrades.StackingGroupHandler.TierCount(TechType)">
            <summary>
            Returns how many upgrades of a specific tier were counted.
            </summary>
            <param name="tier">The tier to check.</param>
            <returns>The total number of upgrades when the <see cref="T:TechType"/> is managed by this collection; Otherwise returns -1.</returns>
        </member>
        <member name="P:MoreCyclopsUpgrades.API.Upgrades.StackingGroupHandler.Item(TechType)">
            <summary>
            Gets the total counts of the specified upgrade tier.<para/>
            WARNING: This method provides no error checking.
            </summary>
            <value>
            The total count of this tier of upgrade.
            </value>
            <param name="tier">The tier to check.</param>
            <returns>The total number of upgrades when the <see cref="T:TechType"/> is managed by this collection.</returns>
            <seealso cref="M:MoreCyclopsUpgrades.API.Upgrades.StackingGroupHandler.TierCount(TechType)"/>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException"/>
        </member>
        <member name="M:MoreCyclopsUpgrades.API.Upgrades.StackingGroupHandler.#ctor(SubRoot)">
            <summary>
            Initializes a new instance of the <see cref="T:MoreCyclopsUpgrades.API.Upgrades.StackingGroupHandler"/> class, with all necessary default events created.<para/>
            Use this for upgrades that stack similar effects while also allowing a mix of multiple tiers.
            </summary>
            <param name="cyclops">The cyclops.</param>
        </member>
        <member name="M:MoreCyclopsUpgrades.API.Upgrades.StackingGroupHandler.CreateStackingTier(TechType)">
            <summary>
            Adds a new <see cref="T:MoreCyclopsUpgrades.API.Upgrades.StackingUpgradeHandler" /> to the collection, with all necessary default events created.
            </summary>
            <param name="techType">The TechType of the upgrade module.</param>
            <returns>The newly created <see cref="T:MoreCyclopsUpgrades.API.Upgrades.StackingUpgradeHandler" /> intance.</returns>
        </member>
        <member name="T:MoreCyclopsUpgrades.API.Upgrades.StackingUpgradeHandler">
            <summary>
            Represents a specialized type of upgrade module that is intended to stack its effect with other similar upgrades.<para/>
            This is always created through <see cref="M:MoreCyclopsUpgrades.API.Upgrades.StackingGroupHandler.CreateStackingTier(TechType)"/>.
            </summary>
            <seealso cref="T:MoreCyclopsUpgrades.API.Upgrades.UpgradeHandler" />
        </member>
        <member name="F:MoreCyclopsUpgrades.API.Upgrades.StackingUpgradeHandler.ParentCollection">
            <summary>
            The parent <see cref="T:MoreCyclopsUpgrades.API.Upgrades.StackingGroupHandler"/> that manages the collection as a group.
            </summary>
        </member>
        <member name="P:MoreCyclopsUpgrades.API.Upgrades.StackingUpgradeHandler.GroupHandler">
            <summary>
            The parent <see cref="T:MoreCyclopsUpgrades.API.Upgrades.UpgradeHandler"/> that manages the collection as a group.
            </summary>
        </member>
        <member name="T:MoreCyclopsUpgrades.API.Upgrades.TieredGroupHandler`1">
            <summary>
            Represents the complete collection of <see cref="T:MoreCyclopsUpgrades.API.Upgrades.TieredUpgradeHandler`1"/> instances.<para/>
            The events for this collection will be invoked only as needed.
            </summary>
            <typeparam name="T">The data type used to sort the tiers.</typeparam>
            <seealso cref="T:MoreCyclopsUpgrades.API.Upgrades.UpgradeHandler" />
        </member>
        <member name="P:MoreCyclopsUpgrades.API.Upgrades.TieredGroupHandler`1.ManagedTiers">
            <summary>
            Gets a readonly list of the <see cref="T:TechType"/>s managed by this group handler.
            </summary>
            <value>
            The upgrade tiers managed by this group handler.
            </value>
        </member>
        <member name="M:MoreCyclopsUpgrades.API.Upgrades.TieredGroupHandler`1.IsManaging(TechType)">
            <summary>
            Determines whether the specified tech type is managed by this group handler.
            </summary>
            <param name="techType">The TechTech to check.</param>
            <returns>
              <c>true</c> if this group handler manages the specified TechTech; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="P:MoreCyclopsUpgrades.API.Upgrades.TieredGroupHandler`1.HighestValue">
            <summary>
            Gets the highest value reported among the <see cref="T:MoreCyclopsUpgrades.API.Upgrades.TieredUpgradeHandler`1" /> of this collection.
            </summary>
            <value>
            The highest value.
            </value>
        </member>
        <member name="F:MoreCyclopsUpgrades.API.Upgrades.TieredGroupHandler`1.DefaultValue">
            <summary>
            The default value to reset to during the <see cref="F:MoreCyclopsUpgrades.API.Upgrades.UpgradeHandler.OnClearUpgrades"/> event.
            </summary>
        </member>
        <member name="M:MoreCyclopsUpgrades.API.Upgrades.TieredGroupHandler`1.TierValue(TechType)">
            <summary>
            Get the value assigned to the specified tier techtype.
            </summary>
            <param name="tierId">The TechTech to check.</param>
            <returns>The value associated to the tier if found; Otherwise returns <see cref="F:MoreCyclopsUpgrades.API.Upgrades.TieredGroupHandler`1.DefaultValue"/>.</returns>
        </member>
        <member name="M:MoreCyclopsUpgrades.API.Upgrades.TieredGroupHandler`1.#ctor(`0,SubRoot)">
            <summary>
            Initializes a new instance of the <see cref="T:MoreCyclopsUpgrades.API.Upgrades.TieredGroupHandler`1" /> class with the default tier value.
            </summary>
            <param name="defaultValue">The default value to use when upgrades are cleared.</param>
            <param name="cyclops">The cyclops where the handler is being registered.</param>
        </member>
        <member name="M:MoreCyclopsUpgrades.API.Upgrades.TieredGroupHandler`1.CreateTier(TechType,`0)">
            <summary>
            Adds a new <see cref="T:MoreCyclopsUpgrades.API.Upgrades.TieredUpgradeHandler`1" /> to the collection, with all necessary default events created.<para/>
            Use this for upgrades where only the highest tier is counted, no matter how many different tiers are equipped.
            </summary>
            <param name="techType">The TechType of the upgrade module.</param>
            <param name="tieredValue">The tiered value this upgrade module represents.</param>
            <returns>The newly created <see cref="T:MoreCyclopsUpgrades.API.Upgrades.TieredUpgradeHandler`1"/> instance.</returns>
        </member>
        <member name="T:MoreCyclopsUpgrades.API.Upgrades.IUpgradeHandlerCreator">
            <summary>
            Defines an interface for a class capable of creating a new <see cref="T:MoreCyclopsUpgrades.API.Upgrades.UpgradeHandler"/> on demand.
            </summary>
        </member>
        <member name="M:MoreCyclopsUpgrades.API.Upgrades.IUpgradeHandlerCreator.CreateUpgradeHandler(SubRoot)">
            <summary>
            Creates a new <see cref="T:MoreCyclopsUpgrades.API.Upgrades.UpgradeHandler"/> when the Cyclops is initialized.
            </summary>
            <returns>A newly instantiated <see cref="T:MoreCyclopsUpgrades.API.Upgrades.UpgradeHandler"/> ready to handle upgrade events.</returns>
        </member>
        <member name="T:MoreCyclopsUpgrades.API.Upgrades.CreateUpgradeHandler">
            <summary>
            Defines a method that creates a new <see cref="T:MoreCyclopsUpgrades.API.Upgrades.UpgradeHandler"/> when needed.
            </summary>
            <returns>A newly instantiated <see cref="T:MoreCyclopsUpgrades.API.Upgrades.UpgradeHandler"/> ready to handle upgrade events.</returns>
        </member>
        <member name="T:MoreCyclopsUpgrades.API.Upgrades.CyclopsUpgrade">
            <summary>
            Extends the <see cref="T:SMLHelper.V2.Assets.Craftable"/> class with handling and defaults specific for Cyclops upgrade modules.
            </summary>
            <seealso cref="T:SMLHelper.V2.Assets.Craftable" />
        </member>
        <member name="M:MoreCyclopsUpgrades.API.Upgrades.CyclopsUpgrade.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <seealso cref="T:SMLHelper.V2.Assets.Craftable"/> <see cref="T:MoreCyclopsUpgrades.API.Upgrades.CyclopsUpgrade"/> class.<para/>
            Any item created with this class with automatically be equipable in the Cyclops.
            </summary>
            <param name="classId">The main internal identifier for this item. Your item's <see cref="T:TechType" /> will be created using this name.</param>
            <param name="friendlyName">The name displayed in-game for this item whether in the open world or in the inventory.</param>
            <param name="description">The description for this item; Typically seen in the PDA, inventory, or crafting screens.</param>
        </member>
        <member name="P:MoreCyclopsUpgrades.API.Upgrades.CyclopsUpgrade.EquipmentType">
            <summary>
            Gets the type of equipment slot this item can fit into.
            </summary>
        </member>
        <member name="P:MoreCyclopsUpgrades.API.Upgrades.CyclopsUpgrade.GroupForPDA">
            <summary>
            Overriden to ensure this item appearas within the <see cref="F:TechGroup.Cyclops"/> group in the PDA blurprints menu.
            </summary>
        </member>
        <member name="P:MoreCyclopsUpgrades.API.Upgrades.CyclopsUpgrade.CategoryForPDA">
            <summary>
            Overrides to ensure this item appears within the <see cref="F:TechCategory.CyclopsUpgrades"/> category in the PDA blueprints menu.
            </summary>
        </member>
        <member name="P:MoreCyclopsUpgrades.API.Upgrades.CyclopsUpgrade.PrefabTemplate">
            <summary>
            Gets the prefab template used to clone new instances of this upgrade module.<para/>
            Defaults to <see cref="F:TechType.CyclopsThermalReactorModule"/> which is enough for most any Cyclops upgrade module.
            </summary>
            <value>
            The prefab template.
            </value>
        </member>
        <member name="P:MoreCyclopsUpgrades.API.Upgrades.CyclopsUpgrade.RequiredForUnlock">
            <summary>
            Overriden to set to have the <see cref="F:TechType.Cyclops" /> be required before this upgrade module can be unlocked.
            If not overriden, it this item will be unlocked from the start of the game.
            </summary>
        </member>
        <member name="P:MoreCyclopsUpgrades.API.Upgrades.CyclopsUpgrade.SortAfter">
            <summary>
            Override this to set which other module in the PDA this upgrade module should be sorted after.
            </summary>
        </member>
        <member name="M:MoreCyclopsUpgrades.API.Upgrades.CyclopsUpgrade.GetGameObject">
            <summary>
            Gets the prefab game object. Set up your prefab components here.<para/>
            A default implementation is already provided which creates the new item by modifying a clone of the item defined in <see cref="P:MoreCyclopsUpgrades.API.Upgrades.CyclopsUpgrade.PrefabTemplate"/>.
            </summary>
            <returns>
            The game object to be instantiated into a new in-game entity.
            </returns>
        </member>
        <member name="M:MoreCyclopsUpgrades.API.Upgrades.CyclopsUpgrade.SpawnCyclopsModule(TechType)">
            <summary>
            A utility method that spawns a cyclops upgrade module by TechType ID.
            </summary>
            <param name="techTypeID">The tech type ID.</param>
            <returns>A new <see cref="T:InventoryItem"/> that wraps up a <see cref="T:Pickupable"/> game object.</returns>
        </member>
        <member name="T:MoreCyclopsUpgrades.API.Upgrades.TieredUpgradeHandler`1">
            <summary>
            Represents a specialized type of upgrade module that is intended to be non-stacking, where only the best version applies.<para/>
            This is always created through <see cref="M:MoreCyclopsUpgrades.API.Upgrades.TieredGroupHandler`1.CreateTier(TechType,`0)"/>.
            </summary>
            <typeparam name="T">The data type used to sort the tiers.</typeparam>
            <seealso cref="T:MoreCyclopsUpgrades.API.Upgrades.UpgradeHandler" />
        </member>
        <member name="F:MoreCyclopsUpgrades.API.Upgrades.TieredUpgradeHandler`1.TieredValue">
            <summary>
            The value of this upgrade's tier. Higher values are always used before lower values.
            </summary>
        </member>
        <member name="F:MoreCyclopsUpgrades.API.Upgrades.TieredUpgradeHandler`1.ParentCollection">
            <summary>
            The parent <see cref="T:MoreCyclopsUpgrades.API.Upgrades.TieredGroupHandler`1"/> that manages the collection as a group.
            </summary>
        </member>
        <member name="P:MoreCyclopsUpgrades.API.Upgrades.TieredUpgradeHandler`1.GroupHandler">
            <summary>
            The parent <see cref="T:MoreCyclopsUpgrades.API.Upgrades.UpgradeHandler"/> that manages the collection as a group.
            </summary>
        </member>
        <member name="T:MoreCyclopsUpgrades.API.Upgrades.UpgradeHandler">
            <summary>
            Represents all the behaviors for a cyclops upgrade module at the time of the module being installed and counted.
            </summary>
        </member>
        <member name="T:MoreCyclopsUpgrades.API.Upgrades.UpgradeHandler.UpgradeEvent">
            <summary>
            Defines a method to invoke with no paramters. Used for <seealso cref="F:MoreCyclopsUpgrades.API.Upgrades.UpgradeHandler.OnClearUpgrades"/> and <see cref="F:MoreCyclopsUpgrades.API.Upgrades.UpgradeHandler.OnFinishedUpgrades"/>.
            </summary>
        </member>
        <member name="T:MoreCyclopsUpgrades.API.Upgrades.UpgradeHandler.UpgradeEventSlotBound">
            <summary>
            Defines a method to invoke that takes all the needed references to identify a single upgrade module instance. Used for <seealso cref="F:MoreCyclopsUpgrades.API.Upgrades.UpgradeHandler.OnUpgradeCountedDetailed" />.
            </summary>
            <param name="modules">The equipment module where the event took place.</param>
            <param name="slot">The equipment slot where the event took place.</param>
            <param name="inventoryItem">The inventory item.</param>
        </member>
        <member name="T:MoreCyclopsUpgrades.API.Upgrades.UpgradeHandler.UpgradeAllowedEvent">
            <summary>
            Defines a method to invoke that returns whether or not an item is allowed in or out. Used for <seealso cref="F:MoreCyclopsUpgrades.API.Upgrades.UpgradeHandler.IsAllowedToAdd"/> and <seealso cref="F:MoreCyclopsUpgrades.API.Upgrades.UpgradeHandler.IsAllowedToRemove"/>.
            </summary>
            <param name="item">The item being checked.</param>
            <param name="verbose">if set to <c>true</c> verbose text display was requested; Otherwise <c>false</c>.</param>
            <returns></returns>
        </member>
        <member name="F:MoreCyclopsUpgrades.API.Upgrades.UpgradeHandler.Cyclops">
            <summary>
            The cyclops sub where this upgrade handler is being used.
            </summary>
        </member>
        <member name="F:MoreCyclopsUpgrades.API.Upgrades.UpgradeHandler.TechType">
            <summary>
            The TechType that identifies this type of upgrade module.
            </summary>
        </member>
        <member name="P:MoreCyclopsUpgrades.API.Upgrades.UpgradeHandler.Count">
            <summary>
            Gets the number of copies of this upgrade module type currently installed in the cyclops.
            This value will not exceed <see cref="P:MoreCyclopsUpgrades.API.Upgrades.UpgradeHandler.Count"/>.
            </summary>
            <value>
            The total number of upgrade modules of this <see cref="F:MoreCyclopsUpgrades.API.Upgrades.UpgradeHandler.TechType"/> found.
            </value>
        </member>
        <member name="P:MoreCyclopsUpgrades.API.Upgrades.UpgradeHandler.MaxCount">
            <summary>
            Gets or sets the maximum number of copies of the upgrade module allowed.
            </summary>
            <value>
            The maximum count.
            </value>
        </member>
        <member name="P:MoreCyclopsUpgrades.API.Upgrades.UpgradeHandler.MaxLimitReached">
            <summary>
            Gets a value indicating whether the maximum number of copies of this upgrade module has been reached.
            </summary>
            <value>
              <c>true</c> if <see cref="P:MoreCyclopsUpgrades.API.Upgrades.UpgradeHandler.Count"/> now equals or would have exceeded <see cref="P:MoreCyclopsUpgrades.API.Upgrades.UpgradeHandler.MaxCount"/>; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:MoreCyclopsUpgrades.API.Upgrades.UpgradeHandler.ExceededMaxLimit">
            <summary>
            Gets a value indicating whether the maximum number of copies of this upgrade module has been exceeded.
            </summary>
            <value>
              <c>true</c> if the real count of modules is greater than <see cref="P:MoreCyclopsUpgrades.API.Upgrades.UpgradeHandler.MaxCount"/>; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:MoreCyclopsUpgrades.API.Upgrades.UpgradeHandler.HasUpgrade">
            <summary>
            Gets a value indicating whether there is at least one copy of this upgrade module in the cyclops.
            </summary>
            <value>
              <c>true</c> if <see cref="P:MoreCyclopsUpgrades.API.Upgrades.UpgradeHandler.Count"/> is at least 1; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="F:MoreCyclopsUpgrades.API.Upgrades.UpgradeHandler.OnClearUpgrades">
            <summary>
            This event is invoked when upgrades are being cleared, right before <see cref="P:MoreCyclopsUpgrades.API.Upgrades.UpgradeHandler.Count"/> is reset.<para/>
            This happens every time upgrades are changed.
            </summary>
        </member>
        <member name="F:MoreCyclopsUpgrades.API.Upgrades.UpgradeHandler.OnUpgradeCountedDetailed">
            <summary>
            This event is invoked when a copy of this module's <see cref="F:MoreCyclopsUpgrades.API.Upgrades.UpgradeHandler.TechType"/> is found and counted.<para/>
            This will happen for each copy found in the cyclops.<para/>
            Unlike <see cref="F:MoreCyclopsUpgrades.API.Upgrades.UpgradeHandler.OnUpgradeCounted"/>, this event will contain parameter references to the upgrade module and its location.
            </summary>
        </member>
        <member name="F:MoreCyclopsUpgrades.API.Upgrades.UpgradeHandler.OnUpgradeCounted">
            <summary>
            This event is invoked when a copy of this module's <see cref="F:MoreCyclopsUpgrades.API.Upgrades.UpgradeHandler.TechType"/> is found and counted.<para/>
            This will happen for each copy found in the cyclops.<para/>
            Unlike <see cref="F:MoreCyclopsUpgrades.API.Upgrades.UpgradeHandler.OnUpgradeCountedDetailed"/>, this event will send no extra parameters.
            </summary>
        </member>
        <member name="F:MoreCyclopsUpgrades.API.Upgrades.UpgradeHandler.OnFinishedUpgrades">
            <summary>
            This event is invoked after all upgrade modules have been found.<para/>
            This happens every time upgrades are changed.
            </summary>
        </member>
        <member name="F:MoreCyclopsUpgrades.API.Upgrades.UpgradeHandler.OnFirstTimeMaxCountReached">
            <summary>
            This event is invoked after all upgrade modules have been found and counted,<para/>
            but only if this is the first time that the <see cref="P:MoreCyclopsUpgrades.API.Upgrades.UpgradeHandler.MaxCount"/> of upgrades has been achieved.
            </summary>
        </member>
        <member name="F:MoreCyclopsUpgrades.API.Upgrades.UpgradeHandler.IsAllowedToAdd">
            <summary>
            This event is invoked when the player is attempting to add an upgrade of this type to an upgrade console.
            </summary>
        </member>
        <member name="F:MoreCyclopsUpgrades.API.Upgrades.UpgradeHandler.IsAllowedToRemove">
            <summary>
            This event is invoked when the player is attempting to remove an upgrade of this type to an upgrade console.
            </summary>
        </member>
        <member name="M:MoreCyclopsUpgrades.API.Upgrades.UpgradeHandler.#ctor(TechType,SubRoot)">
            <summary>
            Initializes a new instance of the <see cref="T:MoreCyclopsUpgrades.API.Upgrades.UpgradeHandler" /> class.
            </summary>
            <param name="techType">The TechType of the upgrade module.</param>
            <param name="cyclops">The cyclops where the handler is being registered.</param>
        </member>
        <member name="P:MoreCyclopsUpgrades.API.Upgrades.UpgradeHandler.TrackedItems">
            <summary>
            The collection of upgrade module <see cref="T:InventoryItem"/>s that are tracked by this upgrade handler.
            </summary>
        </member>
        <member name="P:MoreCyclopsUpgrades.API.Upgrades.UpgradeHandler.SourceMod">
            <summary>
            Gets the assembly name of the source mod that created this UpgradeHandler.
            </summary>
        </member>
        <member name="T:MoreCyclopsUpgrades.API.MCUServices">
            <summary>
            The main entry point for all API services provided by MoreCyclopsUpgrades.
            </summary>
            <seealso cref="T:MoreCyclopsUpgrades.API.IMCUCrossMod" />
        </member>
        <member name="F:MoreCyclopsUpgrades.API.MCUServices.MinimalPowerValue">
            <summary>
            "Practically zero" for all intents and purposes.<para/>
            Any energy value lower than this should be considered zero.
            </summary>
        </member>
        <member name="P:MoreCyclopsUpgrades.API.MCUServices.CrossMod">
            <summary>
            Contains methods for asisting with cross-mod compatibility with other Cyclops mod.
            </summary>
        </member>
        <member name="P:MoreCyclopsUpgrades.API.MCUServices.StepsToCyclopsModulesTabInCyclopsFabricator">
            <summary>
            Gets the steps to "CyclopsModules" crafting tab in the Cyclops Fabricator.<para />
            This would be necessary for best cross-compatibility with the [VehicleUpgradesInCyclops] mod.<para />
            Will return null if this mod isn't present, under the assumption that this mod isn't present and it is otherwise find to add crafting nodes to the Cyclops Fabricator root.
            </summary>
            <value>
            The steps to the Cyclops Fabricator's "CyclopsModules" crafting tab if it exists.
            </value>
        </member>
        <member name="M:MoreCyclopsUpgrades.API.MCUServices.GetPowerRatingManager(SubRoot)">
            <summary>
            Gets the <see cref="T:MoreCyclopsUpgrades.API.General.IPowerRatingManager" /> manging the specified Cyclops sub;
            </summary>
            <param name="cyclops"></param>
            <returns></returns>
        </member>
        <member name="M:MoreCyclopsUpgrades.API.MCUServices.ApplyPowerRatingModifier(SubRoot,TechType,System.Single)">
            <summary>
            Applies the power rating modifier to the specified Cyclops.
            </summary>
            <param name="cyclops">The Cyclops sub to apply the modifier to.</param>
            <param name="techType">The source of the power rating modifier. Not allowed to be <see cref="F:TechType.None" />.</param>
            <param name="modifier">The modifier. Must be a positive value.<para />
            Values less than <c>1f</c> reduce engine efficienty rating.<para />
            Values greater than <c>1f</c> improve engine efficienty rating.</param>
        </member>
        <member name="M:MoreCyclopsUpgrades.API.MCUServices.HasUpgradeInstalled(SubRoot,TechType)">
            <summary>
            Checks whether the Cyclops has the specified upgrade module installed anywhere across all upgrade consoles.
            </summary>
            <param name="cyclops">The cyclops to search.</param>
            <param name="techType">The upgrade module's techtype ID.</param>
            <returns>
              <c>true</c> if the upgrade is found installed on the Cyclops; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:MoreCyclopsUpgrades.API.MCUServices.GetUpgradeCount(SubRoot,TechType)">
            <summary>
            Gets the total number of the specified upgrade module currently installed in the Cyclops.
            </summary>
            <param name="cyclops">The cyclops to search.</param>
            <param name="techType">The upgrade module's techtype ID.</param>
            <returns>
            The number of upgrade modules of this techtype ID currently in the Cyclops.
            </returns>
        </member>
        <member name="M:MoreCyclopsUpgrades.API.MCUServices.GetAllUpgradeSlots(SubRoot)">
            <summary>
            Gets an enumeration of all <see cref="T:MoreCyclopsUpgrades.API.Buildables.UpgradeSlot"/>s in this Cyclops across all upgrade consoles.
            </summary>
            <param name="cyclops">The cyclops to search.</param>
            <returns>An iterator of <see cref="T:System.Collections.Generic.IEnumerable`1"/> the covers all upgrade slots in the Cyclops.</returns>
        </member>
        <member name="M:MoreCyclopsUpgrades.API.MCUServices.GetAllUpgradeHandlers(SubRoot)">
            <summary>
            Returns a collection of all upgrade handlers for the Cyclops sub.
            </summary>
            <param name="cyclops">The cyclops sub being accessed.</param>
            <returns>A read-only collection of all upgrade handlers managing this sub.</returns>
        </member>
        <member name="P:MoreCyclopsUpgrades.API.MCUServices.Register">
            <summary>
            Register your upgrades, charger, and managers with MoreCyclopsUpgrades.<para/>
            WARNING! These methods MUST be invoked during patch time.
            </summary>
        </member>
        <member name="M:MoreCyclopsUpgrades.API.MCUServices.CyclopsCharger``1(MoreCyclopsUpgrades.API.Charging.CreateCyclopsCharger)">
            <summary>
            Registers a <see cref="T:MoreCyclopsUpgrades.API.Charging.CreateCyclopsCharger" /> method that creates a new <see cref="T:MoreCyclopsUpgrades.API.Charging.CyclopsCharger" /> on demand.<para />
            This method will be invoked only once for each Cyclops sub in the game world.<para />
            Use this for rechargable batteries and energy drawn from the environment.
            </summary>
            <typeparam name="T">Your class that implements <see cref="T:MoreCyclopsUpgrades.API.Charging.CyclopsCharger" />.</typeparam>
            <param name="createEvent">A method that takes no parameters a returns a new instance of an <see cref="T:MoreCyclopsUpgrades.API.Charging.CreateCyclopsCharger" />.</param>
        </member>
        <member name="M:MoreCyclopsUpgrades.API.MCUServices.CyclopsCharger``1(MoreCyclopsUpgrades.API.Charging.ICyclopsChargerCreator)">
            <summary>
            Registers a <see cref="T:MoreCyclopsUpgrades.API.Charging.ICyclopsChargerCreator" /> class that can create a new <see cref="T:MoreCyclopsUpgrades.API.Charging.CyclopsCharger" /> on demand.<para />
            This method will be invoked only once for each Cyclops sub in the game world.<para />
            Use this for rechargable batteries and energy drawn from the environment.
            </summary>
            <typeparam name="T">Your class that implements <see cref="T:MoreCyclopsUpgrades.API.Charging.CyclopsCharger" />.</typeparam>
            <param name="chargerCreator">A class that implements the <see cref="M:MoreCyclopsUpgrades.API.Charging.ICyclopsChargerCreator.CreateCyclopsCharger(SubRoot)" /> method.</param>
        </member>
        <member name="M:MoreCyclopsUpgrades.API.MCUServices.CyclopsUpgradeHandler(MoreCyclopsUpgrades.API.Upgrades.CreateUpgradeHandler)">
            <summary>
            Registers a <see cref="T:MoreCyclopsUpgrades.API.Upgrades.CreateUpgradeHandler" /> method that creates a new <see cref="T:MoreCyclopsUpgrades.API.Upgrades.UpgradeHandler" /> on demand.<para />
            This method will be invoked only once for each Cyclops sub in the game world.
            </summary>
            <param name="createEvent">A method that takes no parameters a returns a new instance of an <see cref="T:MoreCyclopsUpgrades.API.Upgrades.UpgradeHandler" />.</param>
        </member>
        <member name="M:MoreCyclopsUpgrades.API.MCUServices.CyclopsUpgradeHandler(MoreCyclopsUpgrades.API.Upgrades.IUpgradeHandlerCreator)">
            <summary>
            Registers a <see cref="T:MoreCyclopsUpgrades.API.Upgrades.CreateUpgradeHandler" /> class can create a new <see cref="T:MoreCyclopsUpgrades.API.Upgrades.UpgradeHandler" /> on demand.<para />
            This method will be invoked only once for each Cyclops sub in the game world.
            </summary>
            <param name="handlerCreator">A class that implements this <see cref="M:MoreCyclopsUpgrades.API.Upgrades.IUpgradeHandlerCreator.CreateUpgradeHandler(SubRoot)" /> method.</param>
        </member>
        <member name="M:MoreCyclopsUpgrades.API.MCUServices.AuxCyclopsManager``1(MoreCyclopsUpgrades.API.General.CreateAuxCyclopsManager)">
            <summary>
            Registers a <see cref="T:MoreCyclopsUpgrades.API.General.CreateAuxCyclopsManager" /> method that creates returns a new <see cref="T:MoreCyclopsUpgrades.API.General.IAuxCyclopsManager" /> on demand.<para />
            This method will be invoked only once for each Cyclops sub in the game world.<para />
            Use this when you simply need to have a class that is attaches one instance per Cyclops.
            </summary>
            <typeparam name="T">Your class that implements <see cref="T:MoreCyclopsUpgrades.API.General.IAuxCyclopsManager" />.</typeparam>
            <param name="createEvent">The create event.</param>
        </member>
        <member name="M:MoreCyclopsUpgrades.API.MCUServices.AuxCyclopsManager``1(MoreCyclopsUpgrades.API.General.IAuxCyclopsManagerCreator)">
            <summary>
            Registers a <see cref="T:MoreCyclopsUpgrades.API.General.IAuxCyclopsManagerCreator" /> class that can create a new <see cref="T:MoreCyclopsUpgrades.API.General.IAuxCyclopsManager" /> on demand.<para />
            This method will be invoked only once for each Cyclops sub in the game world.<para />
            Use this when you simply need to have a class that attaches one instance per Cyclops.
            </summary>
            <typeparam name="T">Your class that implements <see cref="T:MoreCyclopsUpgrades.API.General.IAuxCyclopsManager" />.</typeparam>
            <param name="managerCreator">The manager creator class instance.</param>
        </member>
        <member name="M:MoreCyclopsUpgrades.API.MCUServices.PdaIconOverlay(TechType,MoreCyclopsUpgrades.API.PDA.IIconOverlayCreator)">
            <summary>
            Registers a <see cref="T:MoreCyclopsUpgrades.API.PDA.IIconOverlayCreator" /> class that can create a new <see cref="T:MoreCyclopsUpgrades.API.PDA.IconOverlay" /> on demand.<para />
            This method will be invoked every time the PDA screen opens up on a Cyclops Upgrade Console that contains a module of the specified <see cref="T:TechType" />.
            </summary>
            <param name="techType">The upgrade module's techtype.</param>
            <param name="overlayCreator">A class that implements a method the <see cref="M:MoreCyclopsUpgrades.API.PDA.IIconOverlayCreator.CreateIconOverlay(uGUI_ItemIcon,InventoryItem)" /> method.</param>
        </member>
        <member name="M:MoreCyclopsUpgrades.API.MCUServices.PdaIconOverlay(TechType,MoreCyclopsUpgrades.API.PDA.CreateIconOverlay)">
            <summary>
            Registers a <see cref="T:MoreCyclopsUpgrades.API.PDA.CreateIconOverlay" /> method that creates a new <see cref="T:MoreCyclopsUpgrades.API.PDA.IconOverlay" /> on demand.<para />
            This method will be invoked every time the PDA screen opens up on a Cyclops Upgrade Console that contains a module of the specified <see cref="T:TechType" />.
            </summary>
            <param name="techType">The upgrade module's techtype.</param>
            <param name="createEvent">A method that takes in a <see cref="T:uGUI_ItemIcon" /> and <see cref="T:InventoryItem" /> and returns a new <see cref="T:MoreCyclopsUpgrades.API.PDA.IconOverlay" />.</param>
        </member>
        <member name="P:MoreCyclopsUpgrades.API.MCUServices.Find">
            <summary>
            Provides methods to find the upgrades, chargers, and managers you registered once the Cyclops sub is running.
            </summary>
        </member>
        <member name="M:MoreCyclopsUpgrades.API.MCUServices.AuxCyclopsManager``1(SubRoot)">
            <summary>
            Gets the typed <see cref="T:MoreCyclopsUpgrades.API.General.IAuxCyclopsManager" /> for the specified Cyclops sub.
            </summary>
            <typeparam name="T">The class you created that implements <see cref="T:MoreCyclopsUpgrades.API.General.IAuxCyclopsManager" />.</typeparam>
            <param name="cyclops">The cyclops to search in.</param>
            <returns>
            A type casted <see cref="T:MoreCyclopsUpgrades.API.General.IAuxCyclopsManager" /> if found; Otherwise returns null if not found.
            </returns>
            <seealso cref="T:MoreCyclopsUpgrades.API.General.CreateAuxCyclopsManager" />
        </member>
        <member name="M:MoreCyclopsUpgrades.API.MCUServices.AllAuxCyclopsManagers``1">
            <summary>
            Gets all typed <see cref="T:MoreCyclopsUpgrades.API.General.IAuxCyclopsManager" />s across all Cyclops subs.
            </summary>
            <typeparam name="T">The class you created that implements <see cref="T:MoreCyclopsUpgrades.API.General.IAuxCyclopsManager" />.</typeparam>
            <returns>
            A type casted enumeration of all <see cref="T:MoreCyclopsUpgrades.API.General.IAuxCyclopsManager" />s found across all Cyclops subs, identified by name.
            </returns>
        </member>
        <member name="M:MoreCyclopsUpgrades.API.MCUServices.CyclopsCharger``1(SubRoot)">
            <summary>
            Gets the typed <see cref="T:MoreCyclopsUpgrades.API.Charging.CyclopsCharger" /> at the specified Cyclops sub.<para />
            Use this if you need to obtain a reference to your <seealso cref="T:MoreCyclopsUpgrades.API.Charging.CyclopsCharger" /> for something else in your mod.
            </summary>
            <typeparam name="T">The class created by the <seealso cref="T:MoreCyclopsUpgrades.API.Charging.CreateCyclopsCharger" /> you passed into <seealso cref="M:MoreCyclopsUpgrades.API.IMCURegistration.CyclopsCharger``1(MoreCyclopsUpgrades.API.Charging.CreateCyclopsCharger)" />.</typeparam>
            <param name="cyclops">The cyclops to search in.</param>
            <returns>
            A type casted <see cref="T:MoreCyclopsUpgrades.API.Charging.CyclopsCharger" /> if found; Otherwise returns null.
            </returns>
        </member>
        <member name="M:MoreCyclopsUpgrades.API.MCUServices.CyclopsUpgradeHandler(SubRoot,TechType)">
            <summary>
            Gets the upgrade handler at the specified Cyclops sub for the specified upgrade module <see cref="T:TechType" />.<para />
            Use this if you need to obtain a reference to your <seealso cref="T:MoreCyclopsUpgrades.API.Upgrades.UpgradeHandler" /> for something else in your mod.
            </summary>
            <param name="cyclops">The cyclops to search in.</param>
            <param name="upgradeId">The upgrade module techtype ID.</param>
            <returns>
            An <see cref="T:MoreCyclopsUpgrades.API.Upgrades.UpgradeHandler" /> if found by techtype; Otherwise returns null.
            </returns>
        </member>
        <member name="M:MoreCyclopsUpgrades.API.MCUServices.CyclopsUpgradeHandler``1(SubRoot,TechType)">
            <summary>
            Gets the upgrade handler at the specified Cyclops sub for the specified upgrade module <see cref="T:TechType" />.<para />
            Use this if you need to obtain a reference to your <seealso cref="T:MoreCyclopsUpgrades.API.Upgrades.UpgradeHandler" /> for something else in your mod.
            </summary>
            <typeparam name="T">The class created by the <seealso cref="T:MoreCyclopsUpgrades.API.Upgrades.CreateUpgradeHandler" /> you passed into <seealso cref="M:MoreCyclopsUpgrades.API.IMCURegistration.CyclopsUpgradeHandler(MoreCyclopsUpgrades.API.Upgrades.CreateUpgradeHandler)" />.</typeparam>
            <param name="cyclops">The cyclops to search in.</param>
            <param name="upgradeId">The upgrade module techtype ID.</param>
            <returns>
            A type casted <see cref="T:MoreCyclopsUpgrades.API.Upgrades.UpgradeHandler" /> if found by techtype; Otherwise returns null.
            </returns>
        </member>
        <member name="M:MoreCyclopsUpgrades.API.MCUServices.CyclopsGroupUpgradeHandler``1(SubRoot,TechType,TechType[])">
            <summary>
            Gets the upgrade handler at the specified Cyclops sub for the specified upgrade module <see cref="T:TechType" />.<para />
            Use this if you need to obtain a reference to your <seealso cref="T:MoreCyclopsUpgrades.API.Upgrades.StackingGroupHandler" /> or <seealso cref="T:MoreCyclopsUpgrades.API.Upgrades.TieredGroupHandler`1" /> for something else in your mod.
            </summary>
            <typeparam name="T">The class created by the <seealso cref="T:MoreCyclopsUpgrades.API.Upgrades.CreateUpgradeHandler" /> you passed into <seealso cref="M:MoreCyclopsUpgrades.API.IMCURegistration.CyclopsUpgradeHandler(MoreCyclopsUpgrades.API.Upgrades.CreateUpgradeHandler)" />.</typeparam>
            <param name="cyclops">The cyclops to search in.</param>
            <param name="upgradeId">The upgrade module techtype ID.</param>
            <param name="additionalIds">Additional techtype IDs for a more precise search.</param>
            <returns>
            A type casted <see cref="T:MoreCyclopsUpgrades.API.Upgrades.UpgradeHandler" /> if found by techtype; Otherwise returns null.
            </returns>
        </member>
        <member name="P:MoreCyclopsUpgrades.API.MCUServices.Logger">
            <summary>
            Provides a set of logging APIs that other mods can use.<para/>
            Debug level logs will only be printed of MCU's debug logging is enabled.
            </summary>
        </member>
        <member name="P:MoreCyclopsUpgrades.API.MCUServices.DebugLogsEnabled">
            <summary>
            Gets a value indicating whether calls into <see cref="M:MoreCyclopsUpgrades.API.MCUServices.Debug(System.String,System.Boolean)" /> are handled or ignored.
            </summary>
            <value>
              <c>true</c> if debug level logs enabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:MoreCyclopsUpgrades.API.MCUServices.Info(System.String,System.Boolean)">
            <summary>
            Writes an INFO level log to the log file. Can be optionally printed to screen.
            </summary>
            <param name="logmessage">The log message to write.</param>
            <param name="showOnScreen">if set to <c>true</c> the log message will show on screen.</param>
        </member>
        <member name="M:MoreCyclopsUpgrades.API.MCUServices.Warning(System.String,System.Boolean)">
            <summary>
            Writes a WARN level log to the log file. Can be optionally printed to screen.
            </summary>
            <param name="logmessage">The log message to write.</param>
            <param name="showOnScreen">if set to <c>true</c> the log message will show on screen.</param>
        </member>
        <member name="M:MoreCyclopsUpgrades.API.MCUServices.Error(System.String,System.Boolean)">
            <summary>
            Writes an ERROR level log to the log file. Can be optionally printed to screen.
            </summary>
            <param name="logmessage">The log message to write.</param>
            <param name="showOnScreen">if set to <c>true</c> the log message will show on screen.</param>
        </member>
        <member name="M:MoreCyclopsUpgrades.API.MCUServices.Error(System.Exception,System.String)">
            <summary>
            Writes <see cref="T:System.Exception" /> to an ERROR level log to file.
            </summary>
            <param name="ex">The exception to log.</param>
            <param name="logmessage">The optional additional message.</param>
        </member>
        <member name="M:MoreCyclopsUpgrades.API.MCUServices.Debug(System.String,System.Boolean)">
            <summary>
            Writes an DEBUG level log to the log file if <see cref="P:MoreCyclopsUpgrades.API.MCUServices.DebugLogsEnabled" /> is enabled. Can be optionally printed to screen.<para />
            No action taken when <see cref="P:MoreCyclopsUpgrades.API.MCUServices.DebugLogsEnabled" /> is set to <c>false</c>;
            </summary>
            <param name="logmessage">The log message to write.</param>
            <param name="showOnScreen">if set to <c>true</c> the log message will show on screen.</param>
        </member>
        <member name="M:MoreCyclopsUpgrades.Managers.ChargeManager.GetTotalReservePower">
            <summary>
            Gets the total available reserve power across all equipment upgrade modules.
            </summary>
            <returns>The <see cref="T:System.Int32"/> value of the total available reserve power.</returns>
        </member>
        <member name="M:MoreCyclopsUpgrades.Managers.ChargeManager.RechargeCyclops">
            <summary>
            Recharges the cyclops' power cells using all charging modules across all upgrade consoles.
            </summary>
            <returns><c>True</c> if the original code for the vanilla Cyclops Thermal Reactor Module is required; Otherwise <c>false</c>.</returns>
        </member>
        <member name="M:MoreCyclopsUpgrades.Managers.CyclopsHUDManager.SlowUpdate(CyclopsUpgradeConsoleHUDManager)">
            <summary>
            Updates the console HUD using data from all equipment modules across all upgrade consoles.
            </summary>
            <param name="hudManager">The console HUD manager.</param>
        </member>
        <member name="T:MoreCyclopsUpgrades.Managers.UpgradeManager">
            <summary>
            The manager class that handles all upgrade events for a given Cyclops <see cref="T:SubRoot"/> instance.
            </summary>
        </member>
        <member name="T:MoreCyclopsUpgrades.QPatch">
            <summary>
            Entry point class for patching.For use by QModManager only.
            </summary>
        </member>
        <member name="M:MoreCyclopsUpgrades.QPatch.PrePatch">
            <summary>
            Setting up the mod config. For use by QModManager only.
            </summary>
        </member>
        <member name="M:MoreCyclopsUpgrades.QPatch.Patch">
            <summary>
            Main patching method. For use by QModManager only.
            </summary>
        </member>
        <member name="M:Common.NumberFormatter.GetNumberColor(System.Single,System.Single,System.Single)">
            <summary>
            Goes from Red at 0% to Green at 100%, passing through Yellow at 50%.
            </summary>
            <param name="value">The current value</param>
            <param name="max">The 100% value.</param>
            <param name="min">The 0% value.</param>
            <returns>The calculated color.</returns>
        </member>
        <member name="M:Common.QuickLogger.GetAssemblyVersion">
            <summary>
            Creates the version string in format "#.#.#" or "#.#.# rev:#"
            </summary>
        </member>
        <member name="T:EasyMarkup.Deque`1">
            <inheritdoc cref="T:System.Collections.Generic.ICollection`1" />    
            <summary>Represents a double-ended queue collection of objects.</summary>
            <typeparam name="T">Specifies the type of elements in the deque.</typeparam>
            <remarks>https://en.wikipedia.org/wiki/Double-ended_queue</remarks>
        </member>
        <member name="F:EasyMarkup.Deque`1._array">
            <summary>
            This array is the underlying data structure that holds all the elements in the <see cref="T:EasyMarkup.Deque`1" />.
            </summary>
        </member>
        <member name="F:EasyMarkup.Deque`1._head">
            <summary>
            The index to the first element in the <see cref="T:EasyMarkup.Deque`1" />.
            Because the <see cref="T:EasyMarkup.Deque`1" /> is implemented as a circular array, the head index may be at any position,
            even after the tail index.
            </summary>
        </member>
        <member name="F:EasyMarkup.Deque`1._tail">
            <summary>
            The index to the last element in the <see cref="T:EasyMarkup.Deque`1" />.
            Because the <see cref="T:EasyMarkup.Deque`1" /> is implemented as a circular array, the tail index may be at any position,
            even before the head index.
            </summary>
        </member>
        <member name="F:EasyMarkup.Deque`1._version">
            <summary>
            Increments whenever the internal array of the <see cref="T:EasyMarkup.Deque`1" /> is changed in any way.
            This is necessary for proper error checking during enumeration.
            </summary>
        </member>
        <member name="M:EasyMarkup.Deque`1.#ctor">
            <inheritdoc />
            <summary>
            Initializes a new instance of the <see cref="T:EasyMarkup.Deque`1" /> class that is empty and has the default initial
            capacity.
            </summary>
        </member>
        <member name="M:EasyMarkup.Deque`1.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:EasyMarkup.Deque`1" /> class that is empty and has the specified initial
            capacity.
            </summary>
            <param name="capacity">The specified initial capacity.</param>
        </member>
        <member name="M:EasyMarkup.Deque`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <inheritdoc />
            <summary>
            Initializes a new instance of the <see cref="T:EasyMarkup.Deque`1" /> class and populates it with the
            specified collection.
            </summary>
            <param name="collection">The collection to be added to this <see cref="T:EasyMarkup.Deque`1" />.</param>
        </member>
        <member name="P:EasyMarkup.Deque`1.Item(System.Int32)">
            <summary>
            Gets or sets the value of an element in the collection by relative index.
            Index 0 always refers to the first element in the collection.
            Incrementing the index always moves through the collection from head to tail.
            </summary>
            <param name="index">The relative index of the element.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Requested index falls outside the array.</exception>
            <returns>The element at the specified index.</returns>
        </member>
        <member name="P:EasyMarkup.Deque`1.Capacity">
            <summary>
            Gets the current capacity of the <see cref="T:EasyMarkup.Deque`1" />.
            This can be optionally set at the constructor and will automatically resize as more elements are added to the
            collection.
            </summary>
        </member>
        <member name="P:EasyMarkup.Deque`1.CountBeforeWrap">
            <summary>
            Gets the total number of elements from the start of the head index.
            </summary>
        </member>
        <member name="P:EasyMarkup.Deque`1.CountAfterWrap">
            <summary>
            Gets the total number of elements from the start of the internal array.
            </summary>
        </member>
        <member name="P:EasyMarkup.Deque`1.IsWrapped">
            <summary>
            If the head index is greater than the tail index, it means we have wrapped around the end of the internal array.
            </summary>
        </member>
        <member name="M:EasyMarkup.Deque`1.NextIndexForwards(System.Int32)">
            <summary>
            Returns the next index, moving forwards, of the circular array.
            Used whenever the elements are added from the end or removed from the start.
            </summary>
            <param name="currentIndex">The starting index.</param>
            <returns>The next index in the array that is 1 increment ahead.</returns>
        </member>
        <member name="M:EasyMarkup.Deque`1.NextIndexBackwards(System.Int32)">
            <summary>
            Returns the next index, moving backwards, of the circular array.
            Used whenever the elements are added from the start or removed from the end.
            </summary>
            <param name="currentIndex">The starting index.</param>
            <returns>The next index in the array that is 1 decrement behind.</returns>
        </member>
        <member name="M:EasyMarkup.Deque`1.RelativeZeroBasedIndex(System.Int32)">
            <summary>
            Returns an index that maps the start of the collection to zero.
            </summary>
            <param name="zeroBasedIndex">A zero based index, where zero refers to the first element of the collection.</param>
            <returns>The actual index of the internal array that maps to the zero based index.</returns>
        </member>
        <member name="P:EasyMarkup.Deque`1.Count">
            <inheritdoc cref="T:System.Collections.Generic.IEnumerable`1" />
            <summary>Gets the number of elements contained in the <see cref="T:EasyMarkup.Deque`1" />.</summary>
            <returns>The number of elements contained in the <see cref="T:EasyMarkup.Deque`1" />.</returns>
        </member>
        <member name="P:EasyMarkup.Deque`1.IsSynchronized">
            <inheritdoc />
            <summary>This collection type is not intended for multi-threaded use.</summary>
        </member>
        <member name="P:EasyMarkup.Deque`1.SyncRoot">
            <inheritdoc />
            <summary>This collection type is not intended for multi-threaded use.</summary>
        </member>
        <member name="M:EasyMarkup.Deque`1.CopyTo(System.Array,System.Int32)">
            <inheritdoc />
            <summary>
            Copies the <see cref="T:EasyMarkup.Deque`1" /> elements to an existing one-dimensional
            <see cref="T:System.Array" />, starting at the specified array index.
            </summary>
            <param name="array">
            The one-dimensional <see cref="T:System.Array" /> that is the destination of the elements copied from <see cref="T:EasyMarkup.Deque`1" />.
            The <see cref="T:System.Array" /> must have zero-based indexing.
            </param>
            <param name="index">The zero-based index in <paramref name="array" /> at which copying begins.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="array" /> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index" /> is less than zero or greater than the target array size.
            </exception>
            <exception cref="T:System.ArgumentException">
            The number of elements in the source <see cref="T:EasyMarkup.Deque`1" /> is greater than the
            available space from <paramref name="index" /> to the end of the destination <paramref name="array" />.
            </exception>
        </member>
        <member name="M:EasyMarkup.Deque`1.GetEnumerator">
            <inheritdoc />
            <summary>
            Enumeration is always done in order from head to tail.
            </summary>
        </member>
        <member name="M:EasyMarkup.Deque`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copies the <see cref="T:EasyMarkup.Deque`1" /> elements to an existing one-dimensional <see cref="T:System.Array" />, starting at
            the specified array index.
            </summary>
            <param name="array">
            The one-dimensional <see cref="T:System.Array" /> that is the destination of the elements copied from
            <see cref="T:EasyMarkup.Deque`1" />.
            The <see cref="T:System.Array" /> must have zero-based indexing.
            </param>
            <param name="index">The zero-based index in <paramref name="array" /> at which copying begins.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="array" /> is null.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index" /> is less than zero.
            </exception>
            <exception cref="T:System.ArgumentException">
            The number of elements in the source <see cref="T:EasyMarkup.Deque`1" /> is greater than the
            available space from <paramref name="index" /> to the end of the destination <paramref name="array" />.
            </exception>
        </member>
        <member name="M:EasyMarkup.Deque`1.Clear">
            <summary>
            Removes all objects from the <see cref="T:EasyMarkup.Deque`1" />.
            </summary>
        </member>
        <member name="M:EasyMarkup.Deque`1.PushHead(`0)">
            <summary>
            Adds an object to the beginning of the <see cref="T:EasyMarkup.Deque`1" />.
            </summary>
            <param name="item">The object to add to the <see cref="T:EasyMarkup.Deque`1" />. The value can be null for reference types.</param>
        </member>
        <member name="M:EasyMarkup.Deque`1.PushTail(`0)">
            <summary>Adds an object to the end of the <see cref="T:EasyMarkup.Deque`1" />.</summary>
            <param name="item">The object to add to the <see cref="T:EasyMarkup.Deque`1" />. The value can be null for reference types.</param>
        </member>
        <member name="M:EasyMarkup.Deque`1.PopHead">
            <summary>
            Removes and returns the object at the beginning of the <see cref="T:EasyMarkup.Deque`1" />.
            </summary>
            <returns>
            The object that is removed from the beginning of the <see cref="T:EasyMarkup.Deque`1" />.
            </returns>
            <exception cref="T:System.InvalidOperationException">The <see cref="T:EasyMarkup.Deque`1" /> is empty.</exception>
        </member>
        <member name="M:EasyMarkup.Deque`1.PopTail">
            <summary>
            Removes and returns the object at the end of the <see cref="T:EasyMarkup.Deque`1" />.
            </summary>
            <returns>
            The object that is removed from the end of the <see cref="T:EasyMarkup.Deque`1" />.
            </returns>
            <exception cref="T:System.InvalidOperationException">The <see cref="T:EasyMarkup.Deque`1" /> is empty.</exception>
        </member>
        <member name="M:EasyMarkup.Deque`1.PeekHead">
            <summary>
            Returns the object at the beginning of the <see cref="T:EasyMarkup.Deque`1" /> without removing it.
            </summary>
            <returns>
            The object at the beginning of the <see cref="T:EasyMarkup.Deque`1" />.
            </returns>
            <exception cref="T:System.InvalidOperationException">The <see cref="T:EasyMarkup.Deque`1" /> is empty.</exception>
        </member>
        <member name="M:EasyMarkup.Deque`1.PeekTail">
            <summary>
            Returns the object at the end of the <see cref="T:EasyMarkup.Deque`1" /> without removing it.
            </summary>
            <returns>
            The object at the end of the <see cref="T:EasyMarkup.Deque`1" />.
            </returns>
            <exception cref="T:System.InvalidOperationException">The <see cref="T:EasyMarkup.Deque`1" /> is empty.</exception>
        </member>
        <member name="M:EasyMarkup.Deque`1.Contains(`0)">
            <summary>Determines whether an element is in the <see cref="T:EasyMarkup.Deque`1" />.</summary>
            <param name="item">The object to locate in the <see cref="T:EasyMarkup.Deque`1" />. The value can be null for reference types.</param>
            <returns><c>True</c> if <paramref name="item" /> is found in the <see cref="T:EasyMarkup.Deque`1" />; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:EasyMarkup.Deque`1.ToArray">
            <summary>Copies the <see cref="T:EasyMarkup.Deque`1" /> elements to a new array.</summary>
            <returns>A new array containing elements copied from the <see cref="T:EasyMarkup.Deque`1" />.</returns>
        </member>
        <member name="M:EasyMarkup.Deque`1.TrimExcess">
            <summary>
            Sets the capacity to the actual number of elements in the <see cref="T:EasyMarkup.Deque`1" />.
            but only if that number is less than 90 percent of current capacity.
            </summary>
        </member>
        <member name="M:EasyMarkup.Deque`1.ArrayCopy(System.Array,System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:EasyMarkup.Deque`1" /> into a compatible array.
            </summary>
            <param name="array">The target array.</param>
            <param name="targetArrayStartingIndex">The index at which to start copying.</param>
        </member>
        <member name="M:EasyMarkup.Deque`1.HandleArrayCapacity">
            <summary>
            Checks if the internal array needs to be resized and defines the next capacity to be used.
            </summary>
        </member>
        <member name="M:EasyMarkup.Deque`1.SetCapacity(System.Int32)">
            <summary> 
            Creates a new internal array with the specified capacity, copies the elements of the <see cref="T:EasyMarkup.Deque`1" /> to it,
            and then replaces the previous internal array with this new one.
            </summary>
            <param name="capacity"></param>
        </member>
        <member name="M:EasyMarkup.Deque`1.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc />
            <summary>
            Enumeration is always done in order from head to tail.
            </summary>
        </member>
        <member name="T:EasyMarkup.Deque`1.Enumerator">
            <inheritdoc cref="T:System.Collections.Generic.IEnumerator`1" />
            <summary>Enumerates the elements of a <see cref="T:EasyMarkup.Deque`1" /> in order from head to tail.</summary>
        </member>
        <member name="M:EasyMarkup.Deque`1.Enumerator.Dispose">
            <inheritdoc />
            <summary>Releases all resources used by the <see cref="T:EasyMarkup.Deque`1.Enumerator" />.</summary>
        </member>
        <member name="M:EasyMarkup.Deque`1.Enumerator.MoveNext">
            <inheritdoc />
            <summary>Advances the enumerator to the next element of the <see cref="T:EasyMarkup.Deque`1" />.</summary>
            <returns>
            true if the enumerator was successfully advanced to the next element; false if the enumerator has passed the
            end of the collection.
            </returns>
            <exception cref="T:System.InvalidOperationException">The collection was modified after the enumerator was created.</exception>
        </member>
        <member name="P:EasyMarkup.Deque`1.Enumerator.Current">
            <inheritdoc />
            <summary>Gets the element at the current position of the enumerator.</summary>
            <returns>The element in the <see cref="T:EasyMarkup.Deque`1" /> at the current position of the enumerator.</returns>
            <exception cref="T:System.InvalidOperationException">
            The enumerator is positioned before the first element of the collection or after the last element.
            </exception>
        </member>
        <member name="T:EasyMarkup.StringBuffer">
            <summary>
            A double-ended-queue style data structure that represents mutable string data.
            </summary>
            <seealso cref="T:System.Char" />
            <seealso cref="T:System.IComparable" />
            <seealso cref="T:System.IConvertible" />
            <seealso cref="T:System.IEquatable`1" />
            <seealso cref="T:System.String" />
            <seealso cref="T:System.ICloneable" />
        </member>
    </members>
</doc>
